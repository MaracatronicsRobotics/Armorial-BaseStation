// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_robot_control.proto

#ifndef PROTOBUF_INCLUDED_ssl_5fsimulation_5frobot_5fcontrol_2eproto
#define PROTOBUF_INCLUDED_ssl_5fsimulation_5frobot_5fcontrol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto 

namespace protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto
class MoveGlobalVelocity;
class MoveGlobalVelocityDefaultTypeInternal;
extern MoveGlobalVelocityDefaultTypeInternal _MoveGlobalVelocity_default_instance_;
class MoveLocalVelocity;
class MoveLocalVelocityDefaultTypeInternal;
extern MoveLocalVelocityDefaultTypeInternal _MoveLocalVelocity_default_instance_;
class MoveWheelVelocity;
class MoveWheelVelocityDefaultTypeInternal;
extern MoveWheelVelocityDefaultTypeInternal _MoveWheelVelocity_default_instance_;
class RobotCommand;
class RobotCommandDefaultTypeInternal;
extern RobotCommandDefaultTypeInternal _RobotCommand_default_instance_;
class RobotControl;
class RobotControlDefaultTypeInternal;
extern RobotControlDefaultTypeInternal _RobotControl_default_instance_;
class RobotMoveCommand;
class RobotMoveCommandDefaultTypeInternal;
extern RobotMoveCommandDefaultTypeInternal _RobotMoveCommand_default_instance_;
namespace google {
namespace protobuf {
template<> ::MoveGlobalVelocity* Arena::CreateMaybeMessage<::MoveGlobalVelocity>(Arena*);
template<> ::MoveLocalVelocity* Arena::CreateMaybeMessage<::MoveLocalVelocity>(Arena*);
template<> ::MoveWheelVelocity* Arena::CreateMaybeMessage<::MoveWheelVelocity>(Arena*);
template<> ::RobotCommand* Arena::CreateMaybeMessage<::RobotCommand>(Arena*);
template<> ::RobotControl* Arena::CreateMaybeMessage<::RobotControl>(Arena*);
template<> ::RobotMoveCommand* Arena::CreateMaybeMessage<::RobotMoveCommand>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class RobotCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RobotCommand) */ {
 public:
  RobotCommand();
  virtual ~RobotCommand();

  RobotCommand(const RobotCommand& from);

  inline RobotCommand& operator=(const RobotCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotCommand(RobotCommand&& from) noexcept
    : RobotCommand() {
    *this = ::std::move(from);
  }

  inline RobotCommand& operator=(RobotCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotCommand* internal_default_instance() {
    return reinterpret_cast<const RobotCommand*>(
               &_RobotCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(RobotCommand* other);
  friend void swap(RobotCommand& a, RobotCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotCommand* New() const final {
    return CreateMaybeMessage<RobotCommand>(NULL);
  }

  RobotCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RobotCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RobotCommand& from);
  void MergeFrom(const RobotCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .RobotMoveCommand move_command = 2;
  bool has_move_command() const;
  void clear_move_command();
  static const int kMoveCommandFieldNumber = 2;
  private:
  const ::RobotMoveCommand& _internal_move_command() const;
  public:
  const ::RobotMoveCommand& move_command() const;
  ::RobotMoveCommand* release_move_command();
  ::RobotMoveCommand* mutable_move_command();
  void set_allocated_move_command(::RobotMoveCommand* move_command);

  // required uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional float kick_speed = 3;
  bool has_kick_speed() const;
  void clear_kick_speed();
  static const int kKickSpeedFieldNumber = 3;
  float kick_speed() const;
  void set_kick_speed(float value);

  // optional float kick_angle = 4 [default = 0];
  bool has_kick_angle() const;
  void clear_kick_angle();
  static const int kKickAngleFieldNumber = 4;
  float kick_angle() const;
  void set_kick_angle(float value);

  // optional float dribbler_speed = 5;
  bool has_dribbler_speed() const;
  void clear_dribbler_speed();
  static const int kDribblerSpeedFieldNumber = 5;
  float dribbler_speed() const;
  void set_dribbler_speed(float value);

  // @@protoc_insertion_point(class_scope:RobotCommand)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_move_command();
  void clear_has_move_command();
  void set_has_kick_speed();
  void clear_has_kick_speed();
  void set_has_kick_angle();
  void clear_has_kick_angle();
  void set_has_dribbler_speed();
  void clear_has_dribbler_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::RobotMoveCommand* move_command_;
  ::google::protobuf::uint32 id_;
  float kick_speed_;
  float kick_angle_;
  float dribbler_speed_;
  friend struct ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RobotMoveCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RobotMoveCommand) */ {
 public:
  RobotMoveCommand();
  virtual ~RobotMoveCommand();

  RobotMoveCommand(const RobotMoveCommand& from);

  inline RobotMoveCommand& operator=(const RobotMoveCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotMoveCommand(RobotMoveCommand&& from) noexcept
    : RobotMoveCommand() {
    *this = ::std::move(from);
  }

  inline RobotMoveCommand& operator=(RobotMoveCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotMoveCommand& default_instance();

  enum CommandCase {
    kWheelVelocity = 1,
    kLocalVelocity = 2,
    kGlobalVelocity = 3,
    COMMAND_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotMoveCommand* internal_default_instance() {
    return reinterpret_cast<const RobotMoveCommand*>(
               &_RobotMoveCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RobotMoveCommand* other);
  friend void swap(RobotMoveCommand& a, RobotMoveCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotMoveCommand* New() const final {
    return CreateMaybeMessage<RobotMoveCommand>(NULL);
  }

  RobotMoveCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RobotMoveCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RobotMoveCommand& from);
  void MergeFrom(const RobotMoveCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotMoveCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .MoveWheelVelocity wheel_velocity = 1;
  bool has_wheel_velocity() const;
  void clear_wheel_velocity();
  static const int kWheelVelocityFieldNumber = 1;
  private:
  const ::MoveWheelVelocity& _internal_wheel_velocity() const;
  public:
  const ::MoveWheelVelocity& wheel_velocity() const;
  ::MoveWheelVelocity* release_wheel_velocity();
  ::MoveWheelVelocity* mutable_wheel_velocity();
  void set_allocated_wheel_velocity(::MoveWheelVelocity* wheel_velocity);

  // optional .MoveLocalVelocity local_velocity = 2;
  bool has_local_velocity() const;
  void clear_local_velocity();
  static const int kLocalVelocityFieldNumber = 2;
  private:
  const ::MoveLocalVelocity& _internal_local_velocity() const;
  public:
  const ::MoveLocalVelocity& local_velocity() const;
  ::MoveLocalVelocity* release_local_velocity();
  ::MoveLocalVelocity* mutable_local_velocity();
  void set_allocated_local_velocity(::MoveLocalVelocity* local_velocity);

  // optional .MoveGlobalVelocity global_velocity = 3;
  bool has_global_velocity() const;
  void clear_global_velocity();
  static const int kGlobalVelocityFieldNumber = 3;
  private:
  const ::MoveGlobalVelocity& _internal_global_velocity() const;
  public:
  const ::MoveGlobalVelocity& global_velocity() const;
  ::MoveGlobalVelocity* release_global_velocity();
  ::MoveGlobalVelocity* mutable_global_velocity();
  void set_allocated_global_velocity(::MoveGlobalVelocity* global_velocity);

  void clear_command();
  CommandCase command_case() const;
  // @@protoc_insertion_point(class_scope:RobotMoveCommand)
 private:
  void set_has_wheel_velocity();
  void set_has_local_velocity();
  void set_has_global_velocity();

  inline bool has_command() const;
  inline void clear_has_command();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union CommandUnion {
    CommandUnion() {}
    ::MoveWheelVelocity* wheel_velocity_;
    ::MoveLocalVelocity* local_velocity_;
    ::MoveGlobalVelocity* global_velocity_;
  } command_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveWheelVelocity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MoveWheelVelocity) */ {
 public:
  MoveWheelVelocity();
  virtual ~MoveWheelVelocity();

  MoveWheelVelocity(const MoveWheelVelocity& from);

  inline MoveWheelVelocity& operator=(const MoveWheelVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveWheelVelocity(MoveWheelVelocity&& from) noexcept
    : MoveWheelVelocity() {
    *this = ::std::move(from);
  }

  inline MoveWheelVelocity& operator=(MoveWheelVelocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveWheelVelocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveWheelVelocity* internal_default_instance() {
    return reinterpret_cast<const MoveWheelVelocity*>(
               &_MoveWheelVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MoveWheelVelocity* other);
  friend void swap(MoveWheelVelocity& a, MoveWheelVelocity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveWheelVelocity* New() const final {
    return CreateMaybeMessage<MoveWheelVelocity>(NULL);
  }

  MoveWheelVelocity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveWheelVelocity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveWheelVelocity& from);
  void MergeFrom(const MoveWheelVelocity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveWheelVelocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float front_right = 1;
  bool has_front_right() const;
  void clear_front_right();
  static const int kFrontRightFieldNumber = 1;
  float front_right() const;
  void set_front_right(float value);

  // required float back_right = 2;
  bool has_back_right() const;
  void clear_back_right();
  static const int kBackRightFieldNumber = 2;
  float back_right() const;
  void set_back_right(float value);

  // required float back_left = 3;
  bool has_back_left() const;
  void clear_back_left();
  static const int kBackLeftFieldNumber = 3;
  float back_left() const;
  void set_back_left(float value);

  // required float front_left = 4;
  bool has_front_left() const;
  void clear_front_left();
  static const int kFrontLeftFieldNumber = 4;
  float front_left() const;
  void set_front_left(float value);

  // @@protoc_insertion_point(class_scope:MoveWheelVelocity)
 private:
  void set_has_front_right();
  void clear_has_front_right();
  void set_has_back_right();
  void clear_has_back_right();
  void set_has_back_left();
  void clear_has_back_left();
  void set_has_front_left();
  void clear_has_front_left();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float front_right_;
  float back_right_;
  float back_left_;
  float front_left_;
  friend struct ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveLocalVelocity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MoveLocalVelocity) */ {
 public:
  MoveLocalVelocity();
  virtual ~MoveLocalVelocity();

  MoveLocalVelocity(const MoveLocalVelocity& from);

  inline MoveLocalVelocity& operator=(const MoveLocalVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveLocalVelocity(MoveLocalVelocity&& from) noexcept
    : MoveLocalVelocity() {
    *this = ::std::move(from);
  }

  inline MoveLocalVelocity& operator=(MoveLocalVelocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveLocalVelocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveLocalVelocity* internal_default_instance() {
    return reinterpret_cast<const MoveLocalVelocity*>(
               &_MoveLocalVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(MoveLocalVelocity* other);
  friend void swap(MoveLocalVelocity& a, MoveLocalVelocity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveLocalVelocity* New() const final {
    return CreateMaybeMessage<MoveLocalVelocity>(NULL);
  }

  MoveLocalVelocity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveLocalVelocity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveLocalVelocity& from);
  void MergeFrom(const MoveLocalVelocity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveLocalVelocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float forward = 1;
  bool has_forward() const;
  void clear_forward();
  static const int kForwardFieldNumber = 1;
  float forward() const;
  void set_forward(float value);

  // required float left = 2;
  bool has_left() const;
  void clear_left();
  static const int kLeftFieldNumber = 2;
  float left() const;
  void set_left(float value);

  // required float angular = 3;
  bool has_angular() const;
  void clear_angular();
  static const int kAngularFieldNumber = 3;
  float angular() const;
  void set_angular(float value);

  // @@protoc_insertion_point(class_scope:MoveLocalVelocity)
 private:
  void set_has_forward();
  void clear_has_forward();
  void set_has_left();
  void clear_has_left();
  void set_has_angular();
  void clear_has_angular();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float forward_;
  float left_;
  float angular_;
  friend struct ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MoveGlobalVelocity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MoveGlobalVelocity) */ {
 public:
  MoveGlobalVelocity();
  virtual ~MoveGlobalVelocity();

  MoveGlobalVelocity(const MoveGlobalVelocity& from);

  inline MoveGlobalVelocity& operator=(const MoveGlobalVelocity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MoveGlobalVelocity(MoveGlobalVelocity&& from) noexcept
    : MoveGlobalVelocity() {
    *this = ::std::move(from);
  }

  inline MoveGlobalVelocity& operator=(MoveGlobalVelocity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MoveGlobalVelocity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MoveGlobalVelocity* internal_default_instance() {
    return reinterpret_cast<const MoveGlobalVelocity*>(
               &_MoveGlobalVelocity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(MoveGlobalVelocity* other);
  friend void swap(MoveGlobalVelocity& a, MoveGlobalVelocity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MoveGlobalVelocity* New() const final {
    return CreateMaybeMessage<MoveGlobalVelocity>(NULL);
  }

  MoveGlobalVelocity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MoveGlobalVelocity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MoveGlobalVelocity& from);
  void MergeFrom(const MoveGlobalVelocity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveGlobalVelocity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // required float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // required float angular = 3;
  bool has_angular() const;
  void clear_angular();
  static const int kAngularFieldNumber = 3;
  float angular() const;
  void set_angular(float value);

  // @@protoc_insertion_point(class_scope:MoveGlobalVelocity)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_angular();
  void clear_has_angular();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float angular_;
  friend struct ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RobotControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RobotControl) */ {
 public:
  RobotControl();
  virtual ~RobotControl();

  RobotControl(const RobotControl& from);

  inline RobotControl& operator=(const RobotControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RobotControl(RobotControl&& from) noexcept
    : RobotControl() {
    *this = ::std::move(from);
  }

  inline RobotControl& operator=(RobotControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RobotControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RobotControl* internal_default_instance() {
    return reinterpret_cast<const RobotControl*>(
               &_RobotControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RobotControl* other);
  friend void swap(RobotControl& a, RobotControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RobotControl* New() const final {
    return CreateMaybeMessage<RobotControl>(NULL);
  }

  RobotControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RobotControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RobotControl& from);
  void MergeFrom(const RobotControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RobotControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .RobotCommand robot_commands = 1;
  int robot_commands_size() const;
  void clear_robot_commands();
  static const int kRobotCommandsFieldNumber = 1;
  ::RobotCommand* mutable_robot_commands(int index);
  ::google::protobuf::RepeatedPtrField< ::RobotCommand >*
      mutable_robot_commands();
  const ::RobotCommand& robot_commands(int index) const;
  ::RobotCommand* add_robot_commands();
  const ::google::protobuf::RepeatedPtrField< ::RobotCommand >&
      robot_commands() const;

  // @@protoc_insertion_point(class_scope:RobotControl)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::RobotCommand > robot_commands_;
  friend struct ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RobotCommand

// required uint32 id = 1;
inline bool RobotCommand::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RobotCommand::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RobotCommand::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RobotCommand::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 RobotCommand::id() const {
  // @@protoc_insertion_point(field_get:RobotCommand.id)
  return id_;
}
inline void RobotCommand::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:RobotCommand.id)
}

// optional .RobotMoveCommand move_command = 2;
inline bool RobotCommand::has_move_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RobotCommand::set_has_move_command() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RobotCommand::clear_has_move_command() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RobotCommand::clear_move_command() {
  if (move_command_ != NULL) move_command_->Clear();
  clear_has_move_command();
}
inline const ::RobotMoveCommand& RobotCommand::_internal_move_command() const {
  return *move_command_;
}
inline const ::RobotMoveCommand& RobotCommand::move_command() const {
  const ::RobotMoveCommand* p = move_command_;
  // @@protoc_insertion_point(field_get:RobotCommand.move_command)
  return p != NULL ? *p : *reinterpret_cast<const ::RobotMoveCommand*>(
      &::_RobotMoveCommand_default_instance_);
}
inline ::RobotMoveCommand* RobotCommand::release_move_command() {
  // @@protoc_insertion_point(field_release:RobotCommand.move_command)
  clear_has_move_command();
  ::RobotMoveCommand* temp = move_command_;
  move_command_ = NULL;
  return temp;
}
inline ::RobotMoveCommand* RobotCommand::mutable_move_command() {
  set_has_move_command();
  if (move_command_ == NULL) {
    auto* p = CreateMaybeMessage<::RobotMoveCommand>(GetArenaNoVirtual());
    move_command_ = p;
  }
  // @@protoc_insertion_point(field_mutable:RobotCommand.move_command)
  return move_command_;
}
inline void RobotCommand::set_allocated_move_command(::RobotMoveCommand* move_command) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete move_command_;
  }
  if (move_command) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      move_command = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, move_command, submessage_arena);
    }
    set_has_move_command();
  } else {
    clear_has_move_command();
  }
  move_command_ = move_command;
  // @@protoc_insertion_point(field_set_allocated:RobotCommand.move_command)
}

// optional float kick_speed = 3;
inline bool RobotCommand::has_kick_speed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RobotCommand::set_has_kick_speed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RobotCommand::clear_has_kick_speed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RobotCommand::clear_kick_speed() {
  kick_speed_ = 0;
  clear_has_kick_speed();
}
inline float RobotCommand::kick_speed() const {
  // @@protoc_insertion_point(field_get:RobotCommand.kick_speed)
  return kick_speed_;
}
inline void RobotCommand::set_kick_speed(float value) {
  set_has_kick_speed();
  kick_speed_ = value;
  // @@protoc_insertion_point(field_set:RobotCommand.kick_speed)
}

// optional float kick_angle = 4 [default = 0];
inline bool RobotCommand::has_kick_angle() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RobotCommand::set_has_kick_angle() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RobotCommand::clear_has_kick_angle() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RobotCommand::clear_kick_angle() {
  kick_angle_ = 0;
  clear_has_kick_angle();
}
inline float RobotCommand::kick_angle() const {
  // @@protoc_insertion_point(field_get:RobotCommand.kick_angle)
  return kick_angle_;
}
inline void RobotCommand::set_kick_angle(float value) {
  set_has_kick_angle();
  kick_angle_ = value;
  // @@protoc_insertion_point(field_set:RobotCommand.kick_angle)
}

// optional float dribbler_speed = 5;
inline bool RobotCommand::has_dribbler_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RobotCommand::set_has_dribbler_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RobotCommand::clear_has_dribbler_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RobotCommand::clear_dribbler_speed() {
  dribbler_speed_ = 0;
  clear_has_dribbler_speed();
}
inline float RobotCommand::dribbler_speed() const {
  // @@protoc_insertion_point(field_get:RobotCommand.dribbler_speed)
  return dribbler_speed_;
}
inline void RobotCommand::set_dribbler_speed(float value) {
  set_has_dribbler_speed();
  dribbler_speed_ = value;
  // @@protoc_insertion_point(field_set:RobotCommand.dribbler_speed)
}

// -------------------------------------------------------------------

// RobotMoveCommand

// optional .MoveWheelVelocity wheel_velocity = 1;
inline bool RobotMoveCommand::has_wheel_velocity() const {
  return command_case() == kWheelVelocity;
}
inline void RobotMoveCommand::set_has_wheel_velocity() {
  _oneof_case_[0] = kWheelVelocity;
}
inline void RobotMoveCommand::clear_wheel_velocity() {
  if (has_wheel_velocity()) {
    delete command_.wheel_velocity_;
    clear_has_command();
  }
}
inline const ::MoveWheelVelocity& RobotMoveCommand::_internal_wheel_velocity() const {
  return *command_.wheel_velocity_;
}
inline ::MoveWheelVelocity* RobotMoveCommand::release_wheel_velocity() {
  // @@protoc_insertion_point(field_release:RobotMoveCommand.wheel_velocity)
  if (has_wheel_velocity()) {
    clear_has_command();
      ::MoveWheelVelocity* temp = command_.wheel_velocity_;
    command_.wheel_velocity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::MoveWheelVelocity& RobotMoveCommand::wheel_velocity() const {
  // @@protoc_insertion_point(field_get:RobotMoveCommand.wheel_velocity)
  return has_wheel_velocity()
      ? *command_.wheel_velocity_
      : *reinterpret_cast< ::MoveWheelVelocity*>(&::_MoveWheelVelocity_default_instance_);
}
inline ::MoveWheelVelocity* RobotMoveCommand::mutable_wheel_velocity() {
  if (!has_wheel_velocity()) {
    clear_command();
    set_has_wheel_velocity();
    command_.wheel_velocity_ = CreateMaybeMessage< ::MoveWheelVelocity >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:RobotMoveCommand.wheel_velocity)
  return command_.wheel_velocity_;
}

// optional .MoveLocalVelocity local_velocity = 2;
inline bool RobotMoveCommand::has_local_velocity() const {
  return command_case() == kLocalVelocity;
}
inline void RobotMoveCommand::set_has_local_velocity() {
  _oneof_case_[0] = kLocalVelocity;
}
inline void RobotMoveCommand::clear_local_velocity() {
  if (has_local_velocity()) {
    delete command_.local_velocity_;
    clear_has_command();
  }
}
inline const ::MoveLocalVelocity& RobotMoveCommand::_internal_local_velocity() const {
  return *command_.local_velocity_;
}
inline ::MoveLocalVelocity* RobotMoveCommand::release_local_velocity() {
  // @@protoc_insertion_point(field_release:RobotMoveCommand.local_velocity)
  if (has_local_velocity()) {
    clear_has_command();
      ::MoveLocalVelocity* temp = command_.local_velocity_;
    command_.local_velocity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::MoveLocalVelocity& RobotMoveCommand::local_velocity() const {
  // @@protoc_insertion_point(field_get:RobotMoveCommand.local_velocity)
  return has_local_velocity()
      ? *command_.local_velocity_
      : *reinterpret_cast< ::MoveLocalVelocity*>(&::_MoveLocalVelocity_default_instance_);
}
inline ::MoveLocalVelocity* RobotMoveCommand::mutable_local_velocity() {
  if (!has_local_velocity()) {
    clear_command();
    set_has_local_velocity();
    command_.local_velocity_ = CreateMaybeMessage< ::MoveLocalVelocity >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:RobotMoveCommand.local_velocity)
  return command_.local_velocity_;
}

// optional .MoveGlobalVelocity global_velocity = 3;
inline bool RobotMoveCommand::has_global_velocity() const {
  return command_case() == kGlobalVelocity;
}
inline void RobotMoveCommand::set_has_global_velocity() {
  _oneof_case_[0] = kGlobalVelocity;
}
inline void RobotMoveCommand::clear_global_velocity() {
  if (has_global_velocity()) {
    delete command_.global_velocity_;
    clear_has_command();
  }
}
inline const ::MoveGlobalVelocity& RobotMoveCommand::_internal_global_velocity() const {
  return *command_.global_velocity_;
}
inline ::MoveGlobalVelocity* RobotMoveCommand::release_global_velocity() {
  // @@protoc_insertion_point(field_release:RobotMoveCommand.global_velocity)
  if (has_global_velocity()) {
    clear_has_command();
      ::MoveGlobalVelocity* temp = command_.global_velocity_;
    command_.global_velocity_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::MoveGlobalVelocity& RobotMoveCommand::global_velocity() const {
  // @@protoc_insertion_point(field_get:RobotMoveCommand.global_velocity)
  return has_global_velocity()
      ? *command_.global_velocity_
      : *reinterpret_cast< ::MoveGlobalVelocity*>(&::_MoveGlobalVelocity_default_instance_);
}
inline ::MoveGlobalVelocity* RobotMoveCommand::mutable_global_velocity() {
  if (!has_global_velocity()) {
    clear_command();
    set_has_global_velocity();
    command_.global_velocity_ = CreateMaybeMessage< ::MoveGlobalVelocity >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:RobotMoveCommand.global_velocity)
  return command_.global_velocity_;
}

inline bool RobotMoveCommand::has_command() const {
  return command_case() != COMMAND_NOT_SET;
}
inline void RobotMoveCommand::clear_has_command() {
  _oneof_case_[0] = COMMAND_NOT_SET;
}
inline RobotMoveCommand::CommandCase RobotMoveCommand::command_case() const {
  return RobotMoveCommand::CommandCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MoveWheelVelocity

// required float front_right = 1;
inline bool MoveWheelVelocity::has_front_right() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveWheelVelocity::set_has_front_right() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveWheelVelocity::clear_has_front_right() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveWheelVelocity::clear_front_right() {
  front_right_ = 0;
  clear_has_front_right();
}
inline float MoveWheelVelocity::front_right() const {
  // @@protoc_insertion_point(field_get:MoveWheelVelocity.front_right)
  return front_right_;
}
inline void MoveWheelVelocity::set_front_right(float value) {
  set_has_front_right();
  front_right_ = value;
  // @@protoc_insertion_point(field_set:MoveWheelVelocity.front_right)
}

// required float back_right = 2;
inline bool MoveWheelVelocity::has_back_right() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveWheelVelocity::set_has_back_right() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveWheelVelocity::clear_has_back_right() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveWheelVelocity::clear_back_right() {
  back_right_ = 0;
  clear_has_back_right();
}
inline float MoveWheelVelocity::back_right() const {
  // @@protoc_insertion_point(field_get:MoveWheelVelocity.back_right)
  return back_right_;
}
inline void MoveWheelVelocity::set_back_right(float value) {
  set_has_back_right();
  back_right_ = value;
  // @@protoc_insertion_point(field_set:MoveWheelVelocity.back_right)
}

// required float back_left = 3;
inline bool MoveWheelVelocity::has_back_left() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveWheelVelocity::set_has_back_left() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoveWheelVelocity::clear_has_back_left() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoveWheelVelocity::clear_back_left() {
  back_left_ = 0;
  clear_has_back_left();
}
inline float MoveWheelVelocity::back_left() const {
  // @@protoc_insertion_point(field_get:MoveWheelVelocity.back_left)
  return back_left_;
}
inline void MoveWheelVelocity::set_back_left(float value) {
  set_has_back_left();
  back_left_ = value;
  // @@protoc_insertion_point(field_set:MoveWheelVelocity.back_left)
}

// required float front_left = 4;
inline bool MoveWheelVelocity::has_front_left() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MoveWheelVelocity::set_has_front_left() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MoveWheelVelocity::clear_has_front_left() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MoveWheelVelocity::clear_front_left() {
  front_left_ = 0;
  clear_has_front_left();
}
inline float MoveWheelVelocity::front_left() const {
  // @@protoc_insertion_point(field_get:MoveWheelVelocity.front_left)
  return front_left_;
}
inline void MoveWheelVelocity::set_front_left(float value) {
  set_has_front_left();
  front_left_ = value;
  // @@protoc_insertion_point(field_set:MoveWheelVelocity.front_left)
}

// -------------------------------------------------------------------

// MoveLocalVelocity

// required float forward = 1;
inline bool MoveLocalVelocity::has_forward() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveLocalVelocity::set_has_forward() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveLocalVelocity::clear_has_forward() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveLocalVelocity::clear_forward() {
  forward_ = 0;
  clear_has_forward();
}
inline float MoveLocalVelocity::forward() const {
  // @@protoc_insertion_point(field_get:MoveLocalVelocity.forward)
  return forward_;
}
inline void MoveLocalVelocity::set_forward(float value) {
  set_has_forward();
  forward_ = value;
  // @@protoc_insertion_point(field_set:MoveLocalVelocity.forward)
}

// required float left = 2;
inline bool MoveLocalVelocity::has_left() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveLocalVelocity::set_has_left() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveLocalVelocity::clear_has_left() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveLocalVelocity::clear_left() {
  left_ = 0;
  clear_has_left();
}
inline float MoveLocalVelocity::left() const {
  // @@protoc_insertion_point(field_get:MoveLocalVelocity.left)
  return left_;
}
inline void MoveLocalVelocity::set_left(float value) {
  set_has_left();
  left_ = value;
  // @@protoc_insertion_point(field_set:MoveLocalVelocity.left)
}

// required float angular = 3;
inline bool MoveLocalVelocity::has_angular() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveLocalVelocity::set_has_angular() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoveLocalVelocity::clear_has_angular() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoveLocalVelocity::clear_angular() {
  angular_ = 0;
  clear_has_angular();
}
inline float MoveLocalVelocity::angular() const {
  // @@protoc_insertion_point(field_get:MoveLocalVelocity.angular)
  return angular_;
}
inline void MoveLocalVelocity::set_angular(float value) {
  set_has_angular();
  angular_ = value;
  // @@protoc_insertion_point(field_set:MoveLocalVelocity.angular)
}

// -------------------------------------------------------------------

// MoveGlobalVelocity

// required float x = 1;
inline bool MoveGlobalVelocity::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MoveGlobalVelocity::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MoveGlobalVelocity::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MoveGlobalVelocity::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float MoveGlobalVelocity::x() const {
  // @@protoc_insertion_point(field_get:MoveGlobalVelocity.x)
  return x_;
}
inline void MoveGlobalVelocity::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:MoveGlobalVelocity.x)
}

// required float y = 2;
inline bool MoveGlobalVelocity::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MoveGlobalVelocity::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MoveGlobalVelocity::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MoveGlobalVelocity::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float MoveGlobalVelocity::y() const {
  // @@protoc_insertion_point(field_get:MoveGlobalVelocity.y)
  return y_;
}
inline void MoveGlobalVelocity::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:MoveGlobalVelocity.y)
}

// required float angular = 3;
inline bool MoveGlobalVelocity::has_angular() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MoveGlobalVelocity::set_has_angular() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MoveGlobalVelocity::clear_has_angular() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MoveGlobalVelocity::clear_angular() {
  angular_ = 0;
  clear_has_angular();
}
inline float MoveGlobalVelocity::angular() const {
  // @@protoc_insertion_point(field_get:MoveGlobalVelocity.angular)
  return angular_;
}
inline void MoveGlobalVelocity::set_angular(float value) {
  set_has_angular();
  angular_ = value;
  // @@protoc_insertion_point(field_set:MoveGlobalVelocity.angular)
}

// -------------------------------------------------------------------

// RobotControl

// repeated .RobotCommand robot_commands = 1;
inline int RobotControl::robot_commands_size() const {
  return robot_commands_.size();
}
inline void RobotControl::clear_robot_commands() {
  robot_commands_.Clear();
}
inline ::RobotCommand* RobotControl::mutable_robot_commands(int index) {
  // @@protoc_insertion_point(field_mutable:RobotControl.robot_commands)
  return robot_commands_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::RobotCommand >*
RobotControl::mutable_robot_commands() {
  // @@protoc_insertion_point(field_mutable_list:RobotControl.robot_commands)
  return &robot_commands_;
}
inline const ::RobotCommand& RobotControl::robot_commands(int index) const {
  // @@protoc_insertion_point(field_get:RobotControl.robot_commands)
  return robot_commands_.Get(index);
}
inline ::RobotCommand* RobotControl::add_robot_commands() {
  // @@protoc_insertion_point(field_add:RobotControl.robot_commands)
  return robot_commands_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::RobotCommand >&
RobotControl::robot_commands() const {
  // @@protoc_insertion_point(field_list:RobotControl.robot_commands)
  return robot_commands_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ssl_5fsimulation_5frobot_5fcontrol_2eproto
