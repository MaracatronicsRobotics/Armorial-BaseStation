// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_control.proto

#ifndef PROTOBUF_INCLUDED_ssl_5fsimulation_5fcontrol_2eproto
#define PROTOBUF_INCLUDED_ssl_5fsimulation_5fcontrol_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "ssl_gc_common.pb.h"
#include "ssl_simulation_config.pb.h"
#include "ssl_simulation_error.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5fcontrol_2eproto 

namespace protobuf_ssl_5fsimulation_5fcontrol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_ssl_5fsimulation_5fcontrol_2eproto
class SimulatorCommand;
class SimulatorCommandDefaultTypeInternal;
extern SimulatorCommandDefaultTypeInternal _SimulatorCommand_default_instance_;
class SimulatorControl;
class SimulatorControlDefaultTypeInternal;
extern SimulatorControlDefaultTypeInternal _SimulatorControl_default_instance_;
class SimulatorResponse;
class SimulatorResponseDefaultTypeInternal;
extern SimulatorResponseDefaultTypeInternal _SimulatorResponse_default_instance_;
class TeleportBall;
class TeleportBallDefaultTypeInternal;
extern TeleportBallDefaultTypeInternal _TeleportBall_default_instance_;
class TeleportRobot;
class TeleportRobotDefaultTypeInternal;
extern TeleportRobotDefaultTypeInternal _TeleportRobot_default_instance_;
namespace google {
namespace protobuf {
template<> ::SimulatorCommand* Arena::CreateMaybeMessage<::SimulatorCommand>(Arena*);
template<> ::SimulatorControl* Arena::CreateMaybeMessage<::SimulatorControl>(Arena*);
template<> ::SimulatorResponse* Arena::CreateMaybeMessage<::SimulatorResponse>(Arena*);
template<> ::TeleportBall* Arena::CreateMaybeMessage<::TeleportBall>(Arena*);
template<> ::TeleportRobot* Arena::CreateMaybeMessage<::TeleportRobot>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class TeleportBall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeleportBall) */ {
 public:
  TeleportBall();
  virtual ~TeleportBall();

  TeleportBall(const TeleportBall& from);

  inline TeleportBall& operator=(const TeleportBall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeleportBall(TeleportBall&& from) noexcept
    : TeleportBall() {
    *this = ::std::move(from);
  }

  inline TeleportBall& operator=(TeleportBall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeleportBall& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleportBall* internal_default_instance() {
    return reinterpret_cast<const TeleportBall*>(
               &_TeleportBall_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TeleportBall* other);
  friend void swap(TeleportBall& a, TeleportBall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeleportBall* New() const final {
    return CreateMaybeMessage<TeleportBall>(NULL);
  }

  TeleportBall* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TeleportBall>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TeleportBall& from);
  void MergeFrom(const TeleportBall& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleportBall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // optional float y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // optional float z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  float z() const;
  void set_z(float value);

  // optional float vx = 4;
  bool has_vx() const;
  void clear_vx();
  static const int kVxFieldNumber = 4;
  float vx() const;
  void set_vx(float value);

  // optional float vy = 5;
  bool has_vy() const;
  void clear_vy();
  static const int kVyFieldNumber = 5;
  float vy() const;
  void set_vy(float value);

  // optional float vz = 6;
  bool has_vz() const;
  void clear_vz();
  static const int kVzFieldNumber = 6;
  float vz() const;
  void set_vz(float value);

  // optional bool teleport_safely = 7 [default = false];
  bool has_teleport_safely() const;
  void clear_teleport_safely();
  static const int kTeleportSafelyFieldNumber = 7;
  bool teleport_safely() const;
  void set_teleport_safely(bool value);

  // optional bool roll = 8 [default = false];
  bool has_roll() const;
  void clear_roll();
  static const int kRollFieldNumber = 8;
  bool roll() const;
  void set_roll(bool value);

  // optional bool by_force = 9 [default = false];
  bool has_by_force() const;
  void clear_by_force();
  static const int kByForceFieldNumber = 9;
  bool by_force() const;
  void set_by_force(bool value);

  // @@protoc_insertion_point(class_scope:TeleportBall)
 private:
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();
  void set_has_vx();
  void clear_has_vx();
  void set_has_vy();
  void clear_has_vy();
  void set_has_vz();
  void clear_has_vz();
  void set_has_teleport_safely();
  void clear_has_teleport_safely();
  void set_has_roll();
  void clear_has_roll();
  void set_has_by_force();
  void clear_has_by_force();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float x_;
  float y_;
  float z_;
  float vx_;
  float vy_;
  float vz_;
  bool teleport_safely_;
  bool roll_;
  bool by_force_;
  friend struct ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TeleportRobot : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:TeleportRobot) */ {
 public:
  TeleportRobot();
  virtual ~TeleportRobot();

  TeleportRobot(const TeleportRobot& from);

  inline TeleportRobot& operator=(const TeleportRobot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TeleportRobot(TeleportRobot&& from) noexcept
    : TeleportRobot() {
    *this = ::std::move(from);
  }

  inline TeleportRobot& operator=(TeleportRobot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeleportRobot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TeleportRobot* internal_default_instance() {
    return reinterpret_cast<const TeleportRobot*>(
               &_TeleportRobot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TeleportRobot* other);
  friend void swap(TeleportRobot& a, TeleportRobot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TeleportRobot* New() const final {
    return CreateMaybeMessage<TeleportRobot>(NULL);
  }

  TeleportRobot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TeleportRobot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TeleportRobot& from);
  void MergeFrom(const TeleportRobot& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TeleportRobot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .RobotId id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  private:
  const ::RobotId& _internal_id() const;
  public:
  const ::RobotId& id() const;
  ::RobotId* release_id();
  ::RobotId* mutable_id();
  void set_allocated_id(::RobotId* id);

  // optional float x = 2;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 2;
  float x() const;
  void set_x(float value);

  // optional float y = 3;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 3;
  float y() const;
  void set_y(float value);

  // optional float orientation = 4;
  bool has_orientation() const;
  void clear_orientation();
  static const int kOrientationFieldNumber = 4;
  float orientation() const;
  void set_orientation(float value);

  // optional float v_x = 5 [default = 0];
  bool has_v_x() const;
  void clear_v_x();
  static const int kVXFieldNumber = 5;
  float v_x() const;
  void set_v_x(float value);

  // optional float v_y = 6 [default = 0];
  bool has_v_y() const;
  void clear_v_y();
  static const int kVYFieldNumber = 6;
  float v_y() const;
  void set_v_y(float value);

  // optional float v_angular = 7 [default = 0];
  bool has_v_angular() const;
  void clear_v_angular();
  static const int kVAngularFieldNumber = 7;
  float v_angular() const;
  void set_v_angular(float value);

  // optional bool present = 8;
  bool has_present() const;
  void clear_present();
  static const int kPresentFieldNumber = 8;
  bool present() const;
  void set_present(bool value);

  // optional bool by_force = 9 [default = false];
  bool has_by_force() const;
  void clear_by_force();
  static const int kByForceFieldNumber = 9;
  bool by_force() const;
  void set_by_force(bool value);

  // @@protoc_insertion_point(class_scope:TeleportRobot)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_orientation();
  void clear_has_orientation();
  void set_has_v_x();
  void clear_has_v_x();
  void set_has_v_y();
  void clear_has_v_y();
  void set_has_v_angular();
  void clear_has_v_angular();
  void set_has_present();
  void clear_has_present();
  void set_has_by_force();
  void clear_has_by_force();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::RobotId* id_;
  float x_;
  float y_;
  float orientation_;
  float v_x_;
  float v_y_;
  float v_angular_;
  bool present_;
  bool by_force_;
  friend struct ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimulatorControl : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SimulatorControl) */ {
 public:
  SimulatorControl();
  virtual ~SimulatorControl();

  SimulatorControl(const SimulatorControl& from);

  inline SimulatorControl& operator=(const SimulatorControl& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimulatorControl(SimulatorControl&& from) noexcept
    : SimulatorControl() {
    *this = ::std::move(from);
  }

  inline SimulatorControl& operator=(SimulatorControl&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimulatorControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimulatorControl* internal_default_instance() {
    return reinterpret_cast<const SimulatorControl*>(
               &_SimulatorControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SimulatorControl* other);
  friend void swap(SimulatorControl& a, SimulatorControl& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimulatorControl* New() const final {
    return CreateMaybeMessage<SimulatorControl>(NULL);
  }

  SimulatorControl* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimulatorControl>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimulatorControl& from);
  void MergeFrom(const SimulatorControl& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulatorControl* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .TeleportRobot teleport_robot = 2;
  int teleport_robot_size() const;
  void clear_teleport_robot();
  static const int kTeleportRobotFieldNumber = 2;
  ::TeleportRobot* mutable_teleport_robot(int index);
  ::google::protobuf::RepeatedPtrField< ::TeleportRobot >*
      mutable_teleport_robot();
  const ::TeleportRobot& teleport_robot(int index) const;
  ::TeleportRobot* add_teleport_robot();
  const ::google::protobuf::RepeatedPtrField< ::TeleportRobot >&
      teleport_robot() const;

  // optional .TeleportBall teleport_ball = 1;
  bool has_teleport_ball() const;
  void clear_teleport_ball();
  static const int kTeleportBallFieldNumber = 1;
  private:
  const ::TeleportBall& _internal_teleport_ball() const;
  public:
  const ::TeleportBall& teleport_ball() const;
  ::TeleportBall* release_teleport_ball();
  ::TeleportBall* mutable_teleport_ball();
  void set_allocated_teleport_ball(::TeleportBall* teleport_ball);

  // optional float simulation_speed = 3;
  bool has_simulation_speed() const;
  void clear_simulation_speed();
  static const int kSimulationSpeedFieldNumber = 3;
  float simulation_speed() const;
  void set_simulation_speed(float value);

  // @@protoc_insertion_point(class_scope:SimulatorControl)
 private:
  void set_has_teleport_ball();
  void clear_has_teleport_ball();
  void set_has_simulation_speed();
  void clear_has_simulation_speed();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::TeleportRobot > teleport_robot_;
  ::TeleportBall* teleport_ball_;
  float simulation_speed_;
  friend struct ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimulatorCommand : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SimulatorCommand) */ {
 public:
  SimulatorCommand();
  virtual ~SimulatorCommand();

  SimulatorCommand(const SimulatorCommand& from);

  inline SimulatorCommand& operator=(const SimulatorCommand& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimulatorCommand(SimulatorCommand&& from) noexcept
    : SimulatorCommand() {
    *this = ::std::move(from);
  }

  inline SimulatorCommand& operator=(SimulatorCommand&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimulatorCommand& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimulatorCommand* internal_default_instance() {
    return reinterpret_cast<const SimulatorCommand*>(
               &_SimulatorCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SimulatorCommand* other);
  friend void swap(SimulatorCommand& a, SimulatorCommand& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimulatorCommand* New() const final {
    return CreateMaybeMessage<SimulatorCommand>(NULL);
  }

  SimulatorCommand* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimulatorCommand>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimulatorCommand& from);
  void MergeFrom(const SimulatorCommand& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulatorCommand* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SimulatorControl control = 1;
  bool has_control() const;
  void clear_control();
  static const int kControlFieldNumber = 1;
  private:
  const ::SimulatorControl& _internal_control() const;
  public:
  const ::SimulatorControl& control() const;
  ::SimulatorControl* release_control();
  ::SimulatorControl* mutable_control();
  void set_allocated_control(::SimulatorControl* control);

  // optional .SimulatorConfig config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  private:
  const ::SimulatorConfig& _internal_config() const;
  public:
  const ::SimulatorConfig& config() const;
  ::SimulatorConfig* release_config();
  ::SimulatorConfig* mutable_config();
  void set_allocated_config(::SimulatorConfig* config);

  // @@protoc_insertion_point(class_scope:SimulatorCommand)
 private:
  void set_has_control();
  void clear_has_control();
  void set_has_config();
  void clear_has_config();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::SimulatorControl* control_;
  ::SimulatorConfig* config_;
  friend struct ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SimulatorResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:SimulatorResponse) */ {
 public:
  SimulatorResponse();
  virtual ~SimulatorResponse();

  SimulatorResponse(const SimulatorResponse& from);

  inline SimulatorResponse& operator=(const SimulatorResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimulatorResponse(SimulatorResponse&& from) noexcept
    : SimulatorResponse() {
    *this = ::std::move(from);
  }

  inline SimulatorResponse& operator=(SimulatorResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimulatorResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimulatorResponse* internal_default_instance() {
    return reinterpret_cast<const SimulatorResponse*>(
               &_SimulatorResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SimulatorResponse* other);
  friend void swap(SimulatorResponse& a, SimulatorResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimulatorResponse* New() const final {
    return CreateMaybeMessage<SimulatorResponse>(NULL);
  }

  SimulatorResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimulatorResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimulatorResponse& from);
  void MergeFrom(const SimulatorResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimulatorResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SimulatorError errors = 1;
  int errors_size() const;
  void clear_errors();
  static const int kErrorsFieldNumber = 1;
  ::SimulatorError* mutable_errors(int index);
  ::google::protobuf::RepeatedPtrField< ::SimulatorError >*
      mutable_errors();
  const ::SimulatorError& errors(int index) const;
  ::SimulatorError* add_errors();
  const ::google::protobuf::RepeatedPtrField< ::SimulatorError >&
      errors() const;

  // @@protoc_insertion_point(class_scope:SimulatorResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::SimulatorError > errors_;
  friend struct ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TeleportBall

// optional float x = 1;
inline bool TeleportBall::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeleportBall::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeleportBall::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeleportBall::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float TeleportBall::x() const {
  // @@protoc_insertion_point(field_get:TeleportBall.x)
  return x_;
}
inline void TeleportBall::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:TeleportBall.x)
}

// optional float y = 2;
inline bool TeleportBall::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeleportBall::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeleportBall::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeleportBall::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float TeleportBall::y() const {
  // @@protoc_insertion_point(field_get:TeleportBall.y)
  return y_;
}
inline void TeleportBall::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:TeleportBall.y)
}

// optional float z = 3;
inline bool TeleportBall::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeleportBall::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeleportBall::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeleportBall::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float TeleportBall::z() const {
  // @@protoc_insertion_point(field_get:TeleportBall.z)
  return z_;
}
inline void TeleportBall::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:TeleportBall.z)
}

// optional float vx = 4;
inline bool TeleportBall::has_vx() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeleportBall::set_has_vx() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeleportBall::clear_has_vx() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeleportBall::clear_vx() {
  vx_ = 0;
  clear_has_vx();
}
inline float TeleportBall::vx() const {
  // @@protoc_insertion_point(field_get:TeleportBall.vx)
  return vx_;
}
inline void TeleportBall::set_vx(float value) {
  set_has_vx();
  vx_ = value;
  // @@protoc_insertion_point(field_set:TeleportBall.vx)
}

// optional float vy = 5;
inline bool TeleportBall::has_vy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeleportBall::set_has_vy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeleportBall::clear_has_vy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeleportBall::clear_vy() {
  vy_ = 0;
  clear_has_vy();
}
inline float TeleportBall::vy() const {
  // @@protoc_insertion_point(field_get:TeleportBall.vy)
  return vy_;
}
inline void TeleportBall::set_vy(float value) {
  set_has_vy();
  vy_ = value;
  // @@protoc_insertion_point(field_set:TeleportBall.vy)
}

// optional float vz = 6;
inline bool TeleportBall::has_vz() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeleportBall::set_has_vz() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeleportBall::clear_has_vz() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeleportBall::clear_vz() {
  vz_ = 0;
  clear_has_vz();
}
inline float TeleportBall::vz() const {
  // @@protoc_insertion_point(field_get:TeleportBall.vz)
  return vz_;
}
inline void TeleportBall::set_vz(float value) {
  set_has_vz();
  vz_ = value;
  // @@protoc_insertion_point(field_set:TeleportBall.vz)
}

// optional bool teleport_safely = 7 [default = false];
inline bool TeleportBall::has_teleport_safely() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeleportBall::set_has_teleport_safely() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeleportBall::clear_has_teleport_safely() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeleportBall::clear_teleport_safely() {
  teleport_safely_ = false;
  clear_has_teleport_safely();
}
inline bool TeleportBall::teleport_safely() const {
  // @@protoc_insertion_point(field_get:TeleportBall.teleport_safely)
  return teleport_safely_;
}
inline void TeleportBall::set_teleport_safely(bool value) {
  set_has_teleport_safely();
  teleport_safely_ = value;
  // @@protoc_insertion_point(field_set:TeleportBall.teleport_safely)
}

// optional bool roll = 8 [default = false];
inline bool TeleportBall::has_roll() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeleportBall::set_has_roll() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeleportBall::clear_has_roll() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeleportBall::clear_roll() {
  roll_ = false;
  clear_has_roll();
}
inline bool TeleportBall::roll() const {
  // @@protoc_insertion_point(field_get:TeleportBall.roll)
  return roll_;
}
inline void TeleportBall::set_roll(bool value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:TeleportBall.roll)
}

// optional bool by_force = 9 [default = false];
inline bool TeleportBall::has_by_force() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TeleportBall::set_has_by_force() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TeleportBall::clear_has_by_force() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TeleportBall::clear_by_force() {
  by_force_ = false;
  clear_has_by_force();
}
inline bool TeleportBall::by_force() const {
  // @@protoc_insertion_point(field_get:TeleportBall.by_force)
  return by_force_;
}
inline void TeleportBall::set_by_force(bool value) {
  set_has_by_force();
  by_force_ = value;
  // @@protoc_insertion_point(field_set:TeleportBall.by_force)
}

// -------------------------------------------------------------------

// TeleportRobot

// required .RobotId id = 1;
inline bool TeleportRobot::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeleportRobot::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeleportRobot::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::RobotId& TeleportRobot::_internal_id() const {
  return *id_;
}
inline const ::RobotId& TeleportRobot::id() const {
  const ::RobotId* p = id_;
  // @@protoc_insertion_point(field_get:TeleportRobot.id)
  return p != NULL ? *p : *reinterpret_cast<const ::RobotId*>(
      &::_RobotId_default_instance_);
}
inline ::RobotId* TeleportRobot::release_id() {
  // @@protoc_insertion_point(field_release:TeleportRobot.id)
  clear_has_id();
  ::RobotId* temp = id_;
  id_ = NULL;
  return temp;
}
inline ::RobotId* TeleportRobot::mutable_id() {
  set_has_id();
  if (id_ == NULL) {
    auto* p = CreateMaybeMessage<::RobotId>(GetArenaNoVirtual());
    id_ = p;
  }
  // @@protoc_insertion_point(field_mutable:TeleportRobot.id)
  return id_;
}
inline void TeleportRobot::set_allocated_id(::RobotId* id) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(id_);
  }
  if (id) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      id = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    set_has_id();
  } else {
    clear_has_id();
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:TeleportRobot.id)
}

// optional float x = 2;
inline bool TeleportRobot::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeleportRobot::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeleportRobot::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeleportRobot::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float TeleportRobot::x() const {
  // @@protoc_insertion_point(field_get:TeleportRobot.x)
  return x_;
}
inline void TeleportRobot::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:TeleportRobot.x)
}

// optional float y = 3;
inline bool TeleportRobot::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeleportRobot::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeleportRobot::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeleportRobot::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float TeleportRobot::y() const {
  // @@protoc_insertion_point(field_get:TeleportRobot.y)
  return y_;
}
inline void TeleportRobot::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:TeleportRobot.y)
}

// optional float orientation = 4;
inline bool TeleportRobot::has_orientation() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeleportRobot::set_has_orientation() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeleportRobot::clear_has_orientation() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeleportRobot::clear_orientation() {
  orientation_ = 0;
  clear_has_orientation();
}
inline float TeleportRobot::orientation() const {
  // @@protoc_insertion_point(field_get:TeleportRobot.orientation)
  return orientation_;
}
inline void TeleportRobot::set_orientation(float value) {
  set_has_orientation();
  orientation_ = value;
  // @@protoc_insertion_point(field_set:TeleportRobot.orientation)
}

// optional float v_x = 5 [default = 0];
inline bool TeleportRobot::has_v_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeleportRobot::set_has_v_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeleportRobot::clear_has_v_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeleportRobot::clear_v_x() {
  v_x_ = 0;
  clear_has_v_x();
}
inline float TeleportRobot::v_x() const {
  // @@protoc_insertion_point(field_get:TeleportRobot.v_x)
  return v_x_;
}
inline void TeleportRobot::set_v_x(float value) {
  set_has_v_x();
  v_x_ = value;
  // @@protoc_insertion_point(field_set:TeleportRobot.v_x)
}

// optional float v_y = 6 [default = 0];
inline bool TeleportRobot::has_v_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TeleportRobot::set_has_v_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TeleportRobot::clear_has_v_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TeleportRobot::clear_v_y() {
  v_y_ = 0;
  clear_has_v_y();
}
inline float TeleportRobot::v_y() const {
  // @@protoc_insertion_point(field_get:TeleportRobot.v_y)
  return v_y_;
}
inline void TeleportRobot::set_v_y(float value) {
  set_has_v_y();
  v_y_ = value;
  // @@protoc_insertion_point(field_set:TeleportRobot.v_y)
}

// optional float v_angular = 7 [default = 0];
inline bool TeleportRobot::has_v_angular() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TeleportRobot::set_has_v_angular() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TeleportRobot::clear_has_v_angular() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TeleportRobot::clear_v_angular() {
  v_angular_ = 0;
  clear_has_v_angular();
}
inline float TeleportRobot::v_angular() const {
  // @@protoc_insertion_point(field_get:TeleportRobot.v_angular)
  return v_angular_;
}
inline void TeleportRobot::set_v_angular(float value) {
  set_has_v_angular();
  v_angular_ = value;
  // @@protoc_insertion_point(field_set:TeleportRobot.v_angular)
}

// optional bool present = 8;
inline bool TeleportRobot::has_present() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TeleportRobot::set_has_present() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TeleportRobot::clear_has_present() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TeleportRobot::clear_present() {
  present_ = false;
  clear_has_present();
}
inline bool TeleportRobot::present() const {
  // @@protoc_insertion_point(field_get:TeleportRobot.present)
  return present_;
}
inline void TeleportRobot::set_present(bool value) {
  set_has_present();
  present_ = value;
  // @@protoc_insertion_point(field_set:TeleportRobot.present)
}

// optional bool by_force = 9 [default = false];
inline bool TeleportRobot::has_by_force() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TeleportRobot::set_has_by_force() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TeleportRobot::clear_has_by_force() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TeleportRobot::clear_by_force() {
  by_force_ = false;
  clear_has_by_force();
}
inline bool TeleportRobot::by_force() const {
  // @@protoc_insertion_point(field_get:TeleportRobot.by_force)
  return by_force_;
}
inline void TeleportRobot::set_by_force(bool value) {
  set_has_by_force();
  by_force_ = value;
  // @@protoc_insertion_point(field_set:TeleportRobot.by_force)
}

// -------------------------------------------------------------------

// SimulatorControl

// optional .TeleportBall teleport_ball = 1;
inline bool SimulatorControl::has_teleport_ball() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimulatorControl::set_has_teleport_ball() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimulatorControl::clear_has_teleport_ball() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimulatorControl::clear_teleport_ball() {
  if (teleport_ball_ != NULL) teleport_ball_->Clear();
  clear_has_teleport_ball();
}
inline const ::TeleportBall& SimulatorControl::_internal_teleport_ball() const {
  return *teleport_ball_;
}
inline const ::TeleportBall& SimulatorControl::teleport_ball() const {
  const ::TeleportBall* p = teleport_ball_;
  // @@protoc_insertion_point(field_get:SimulatorControl.teleport_ball)
  return p != NULL ? *p : *reinterpret_cast<const ::TeleportBall*>(
      &::_TeleportBall_default_instance_);
}
inline ::TeleportBall* SimulatorControl::release_teleport_ball() {
  // @@protoc_insertion_point(field_release:SimulatorControl.teleport_ball)
  clear_has_teleport_ball();
  ::TeleportBall* temp = teleport_ball_;
  teleport_ball_ = NULL;
  return temp;
}
inline ::TeleportBall* SimulatorControl::mutable_teleport_ball() {
  set_has_teleport_ball();
  if (teleport_ball_ == NULL) {
    auto* p = CreateMaybeMessage<::TeleportBall>(GetArenaNoVirtual());
    teleport_ball_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SimulatorControl.teleport_ball)
  return teleport_ball_;
}
inline void SimulatorControl::set_allocated_teleport_ball(::TeleportBall* teleport_ball) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete teleport_ball_;
  }
  if (teleport_ball) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      teleport_ball = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, teleport_ball, submessage_arena);
    }
    set_has_teleport_ball();
  } else {
    clear_has_teleport_ball();
  }
  teleport_ball_ = teleport_ball;
  // @@protoc_insertion_point(field_set_allocated:SimulatorControl.teleport_ball)
}

// repeated .TeleportRobot teleport_robot = 2;
inline int SimulatorControl::teleport_robot_size() const {
  return teleport_robot_.size();
}
inline void SimulatorControl::clear_teleport_robot() {
  teleport_robot_.Clear();
}
inline ::TeleportRobot* SimulatorControl::mutable_teleport_robot(int index) {
  // @@protoc_insertion_point(field_mutable:SimulatorControl.teleport_robot)
  return teleport_robot_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::TeleportRobot >*
SimulatorControl::mutable_teleport_robot() {
  // @@protoc_insertion_point(field_mutable_list:SimulatorControl.teleport_robot)
  return &teleport_robot_;
}
inline const ::TeleportRobot& SimulatorControl::teleport_robot(int index) const {
  // @@protoc_insertion_point(field_get:SimulatorControl.teleport_robot)
  return teleport_robot_.Get(index);
}
inline ::TeleportRobot* SimulatorControl::add_teleport_robot() {
  // @@protoc_insertion_point(field_add:SimulatorControl.teleport_robot)
  return teleport_robot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TeleportRobot >&
SimulatorControl::teleport_robot() const {
  // @@protoc_insertion_point(field_list:SimulatorControl.teleport_robot)
  return teleport_robot_;
}

// optional float simulation_speed = 3;
inline bool SimulatorControl::has_simulation_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimulatorControl::set_has_simulation_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimulatorControl::clear_has_simulation_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimulatorControl::clear_simulation_speed() {
  simulation_speed_ = 0;
  clear_has_simulation_speed();
}
inline float SimulatorControl::simulation_speed() const {
  // @@protoc_insertion_point(field_get:SimulatorControl.simulation_speed)
  return simulation_speed_;
}
inline void SimulatorControl::set_simulation_speed(float value) {
  set_has_simulation_speed();
  simulation_speed_ = value;
  // @@protoc_insertion_point(field_set:SimulatorControl.simulation_speed)
}

// -------------------------------------------------------------------

// SimulatorCommand

// optional .SimulatorControl control = 1;
inline bool SimulatorCommand::has_control() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimulatorCommand::set_has_control() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimulatorCommand::clear_has_control() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimulatorCommand::clear_control() {
  if (control_ != NULL) control_->Clear();
  clear_has_control();
}
inline const ::SimulatorControl& SimulatorCommand::_internal_control() const {
  return *control_;
}
inline const ::SimulatorControl& SimulatorCommand::control() const {
  const ::SimulatorControl* p = control_;
  // @@protoc_insertion_point(field_get:SimulatorCommand.control)
  return p != NULL ? *p : *reinterpret_cast<const ::SimulatorControl*>(
      &::_SimulatorControl_default_instance_);
}
inline ::SimulatorControl* SimulatorCommand::release_control() {
  // @@protoc_insertion_point(field_release:SimulatorCommand.control)
  clear_has_control();
  ::SimulatorControl* temp = control_;
  control_ = NULL;
  return temp;
}
inline ::SimulatorControl* SimulatorCommand::mutable_control() {
  set_has_control();
  if (control_ == NULL) {
    auto* p = CreateMaybeMessage<::SimulatorControl>(GetArenaNoVirtual());
    control_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SimulatorCommand.control)
  return control_;
}
inline void SimulatorCommand::set_allocated_control(::SimulatorControl* control) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete control_;
  }
  if (control) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      control = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, control, submessage_arena);
    }
    set_has_control();
  } else {
    clear_has_control();
  }
  control_ = control;
  // @@protoc_insertion_point(field_set_allocated:SimulatorCommand.control)
}

// optional .SimulatorConfig config = 2;
inline bool SimulatorCommand::has_config() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimulatorCommand::set_has_config() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimulatorCommand::clear_has_config() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::SimulatorConfig& SimulatorCommand::_internal_config() const {
  return *config_;
}
inline const ::SimulatorConfig& SimulatorCommand::config() const {
  const ::SimulatorConfig* p = config_;
  // @@protoc_insertion_point(field_get:SimulatorCommand.config)
  return p != NULL ? *p : *reinterpret_cast<const ::SimulatorConfig*>(
      &::_SimulatorConfig_default_instance_);
}
inline ::SimulatorConfig* SimulatorCommand::release_config() {
  // @@protoc_insertion_point(field_release:SimulatorCommand.config)
  clear_has_config();
  ::SimulatorConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline ::SimulatorConfig* SimulatorCommand::mutable_config() {
  set_has_config();
  if (config_ == NULL) {
    auto* p = CreateMaybeMessage<::SimulatorConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SimulatorCommand.config)
  return config_;
}
inline void SimulatorCommand::set_allocated_config(::SimulatorConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(config_);
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    set_has_config();
  } else {
    clear_has_config();
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:SimulatorCommand.config)
}

// -------------------------------------------------------------------

// SimulatorResponse

// repeated .SimulatorError errors = 1;
inline int SimulatorResponse::errors_size() const {
  return errors_.size();
}
inline ::SimulatorError* SimulatorResponse::mutable_errors(int index) {
  // @@protoc_insertion_point(field_mutable:SimulatorResponse.errors)
  return errors_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::SimulatorError >*
SimulatorResponse::mutable_errors() {
  // @@protoc_insertion_point(field_mutable_list:SimulatorResponse.errors)
  return &errors_;
}
inline const ::SimulatorError& SimulatorResponse::errors(int index) const {
  // @@protoc_insertion_point(field_get:SimulatorResponse.errors)
  return errors_.Get(index);
}
inline ::SimulatorError* SimulatorResponse::add_errors() {
  // @@protoc_insertion_point(field_add:SimulatorResponse.errors)
  return errors_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SimulatorError >&
SimulatorResponse::errors() const {
  // @@protoc_insertion_point(field_list:SimulatorResponse.errors)
  return errors_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_ssl_5fsimulation_5fcontrol_2eproto
