// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_control.proto

#include "ssl_simulation_control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ssl_5fgc_5fcommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RobotId;
}  // namespace protobuf_ssl_5fgc_5fcommon_2eproto
namespace protobuf_ssl_5fsimulation_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SimulatorConfig;
}  // namespace protobuf_ssl_5fsimulation_5fconfig_2eproto
namespace protobuf_ssl_5fsimulation_5fcontrol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5fcontrol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TeleportBall;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5fcontrol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TeleportRobot;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5fcontrol_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SimulatorControl;
}  // namespace protobuf_ssl_5fsimulation_5fcontrol_2eproto
namespace protobuf_ssl_5fsimulation_5ferror_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5ferror_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SimulatorError;
}  // namespace protobuf_ssl_5fsimulation_5ferror_2eproto
class TeleportBallDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeleportBall>
      _instance;
} _TeleportBall_default_instance_;
class TeleportRobotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TeleportRobot>
      _instance;
} _TeleportRobot_default_instance_;
class SimulatorControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimulatorControl>
      _instance;
} _SimulatorControl_default_instance_;
class SimulatorCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimulatorCommand>
      _instance;
} _SimulatorCommand_default_instance_;
class SimulatorResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimulatorResponse>
      _instance;
} _SimulatorResponse_default_instance_;
namespace protobuf_ssl_5fsimulation_5fcontrol_2eproto {
static void InitDefaultsTeleportBall() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TeleportBall_default_instance_;
    new (ptr) ::TeleportBall();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TeleportBall::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TeleportBall =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTeleportBall}, {}};

static void InitDefaultsTeleportRobot() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TeleportRobot_default_instance_;
    new (ptr) ::TeleportRobot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TeleportRobot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TeleportRobot =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTeleportRobot}, {
      &protobuf_ssl_5fgc_5fcommon_2eproto::scc_info_RobotId.base,}};

static void InitDefaultsSimulatorControl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SimulatorControl_default_instance_;
    new (ptr) ::SimulatorControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SimulatorControl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SimulatorControl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSimulatorControl}, {
      &protobuf_ssl_5fsimulation_5fcontrol_2eproto::scc_info_TeleportBall.base,
      &protobuf_ssl_5fsimulation_5fcontrol_2eproto::scc_info_TeleportRobot.base,}};

static void InitDefaultsSimulatorCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SimulatorCommand_default_instance_;
    new (ptr) ::SimulatorCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SimulatorCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SimulatorCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSimulatorCommand}, {
      &protobuf_ssl_5fsimulation_5fcontrol_2eproto::scc_info_SimulatorControl.base,
      &protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_SimulatorConfig.base,}};

static void InitDefaultsSimulatorResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SimulatorResponse_default_instance_;
    new (ptr) ::SimulatorResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SimulatorResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_SimulatorResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsSimulatorResponse}, {
      &protobuf_ssl_5fsimulation_5ferror_2eproto::scc_info_SimulatorError.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_TeleportBall.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TeleportRobot.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimulatorControl.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimulatorCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimulatorResponse.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportBall, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportBall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportBall, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportBall, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportBall, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportBall, vx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportBall, vy_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportBall, vz_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportBall, teleport_safely_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportBall, roll_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportBall, by_force_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportRobot, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportRobot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportRobot, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportRobot, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportRobot, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportRobot, orientation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportRobot, v_x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportRobot, v_y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportRobot, v_angular_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportRobot, present_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::TeleportRobot, by_force_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorControl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorControl, teleport_ball_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorControl, teleport_robot_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorControl, simulation_speed_),
  0,
  ~0u,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorCommand, control_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorCommand, config_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorResponse, errors_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 14, sizeof(::TeleportBall)},
  { 23, 37, sizeof(::TeleportRobot)},
  { 46, 54, sizeof(::SimulatorControl)},
  { 57, 64, sizeof(::SimulatorCommand)},
  { 66, 72, sizeof(::SimulatorResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TeleportBall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_TeleportRobot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SimulatorControl_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SimulatorCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SimulatorResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ssl_simulation_control.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\034ssl_simulation_control.proto\032\023ssl_gc_c"
      "ommon.proto\032\033ssl_simulation_config.proto"
      "\032\032ssl_simulation_error.proto\"\241\001\n\014Telepor"
      "tBall\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\n"
      "\n\002vx\030\004 \001(\002\022\n\n\002vy\030\005 \001(\002\022\n\n\002vz\030\006 \001(\002\022\036\n\017te"
      "leport_safely\030\007 \001(\010:\005false\022\023\n\004roll\030\010 \001(\010"
      ":\005false\022\027\n\010by_force\030\t \001(\010:\005false\"\260\001\n\rTel"
      "eportRobot\022\024\n\002id\030\001 \002(\0132\010.RobotId\022\t\n\001x\030\002 "
      "\001(\002\022\t\n\001y\030\003 \001(\002\022\023\n\013orientation\030\004 \001(\002\022\016\n\003v"
      "_x\030\005 \001(\002:\0010\022\016\n\003v_y\030\006 \001(\002:\0010\022\024\n\tv_angular"
      "\030\007 \001(\002:\0010\022\017\n\007present\030\010 \001(\010\022\027\n\010by_force\030\t"
      " \001(\010:\005false\"z\n\020SimulatorControl\022$\n\rtelep"
      "ort_ball\030\001 \001(\0132\r.TeleportBall\022&\n\016telepor"
      "t_robot\030\002 \003(\0132\016.TeleportRobot\022\030\n\020simulat"
      "ion_speed\030\003 \001(\002\"X\n\020SimulatorCommand\022\"\n\007c"
      "ontrol\030\001 \001(\0132\021.SimulatorControl\022 \n\006confi"
      "g\030\002 \001(\0132\020.SimulatorConfig\"4\n\021SimulatorRe"
      "sponse\022\037\n\006errors\030\001 \003(\0132\017.SimulatorErrorB"
      "8Z6github.com/RoboCup-SSL/ssl-simulation"
      "-protocol/pkg/sim"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 777);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_simulation_control.proto", &protobuf_RegisterTypes);
  ::protobuf_ssl_5fgc_5fcommon_2eproto::AddDescriptors();
  ::protobuf_ssl_5fsimulation_5fconfig_2eproto::AddDescriptors();
  ::protobuf_ssl_5fsimulation_5ferror_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ssl_5fsimulation_5fcontrol_2eproto

// ===================================================================

void TeleportBall::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeleportBall::kXFieldNumber;
const int TeleportBall::kYFieldNumber;
const int TeleportBall::kZFieldNumber;
const int TeleportBall::kVxFieldNumber;
const int TeleportBall::kVyFieldNumber;
const int TeleportBall::kVzFieldNumber;
const int TeleportBall::kTeleportSafelyFieldNumber;
const int TeleportBall::kRollFieldNumber;
const int TeleportBall::kByForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeleportBall::TeleportBall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5fcontrol_2eproto::scc_info_TeleportBall.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeleportBall)
}
TeleportBall::TeleportBall(const TeleportBall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_force_) -
    reinterpret_cast<char*>(&x_)) + sizeof(by_force_));
  // @@protoc_insertion_point(copy_constructor:TeleportBall)
}

void TeleportBall::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_force_) -
      reinterpret_cast<char*>(&x_)) + sizeof(by_force_));
}

TeleportBall::~TeleportBall() {
  // @@protoc_insertion_point(destructor:TeleportBall)
  SharedDtor();
}

void TeleportBall::SharedDtor() {
}

void TeleportBall::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TeleportBall::descriptor() {
  ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeleportBall& TeleportBall::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5fcontrol_2eproto::scc_info_TeleportBall.base);
  return *internal_default_instance();
}


void TeleportBall::Clear() {
// @@protoc_insertion_point(message_clear_start:TeleportBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 255u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&roll_) -
        reinterpret_cast<char*>(&x_)) + sizeof(roll_));
  }
  by_force_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeleportBall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeleportBall)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_vx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vy = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_vy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vz = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_vz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool teleport_safely = 7 [default = false];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_teleport_safely();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &teleport_safely_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool roll = 8 [default = false];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_roll();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &roll_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool by_force = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_by_force();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &by_force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeleportBall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeleportBall)
  return false;
#undef DO_
}

void TeleportBall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeleportBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float vx = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->vx(), output);
  }

  // optional float vy = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->vy(), output);
  }

  // optional float vz = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vz(), output);
  }

  // optional bool teleport_safely = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->teleport_safely(), output);
  }

  // optional bool roll = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->roll(), output);
  }

  // optional bool by_force = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->by_force(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeleportBall)
}

::google::protobuf::uint8* TeleportBall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeleportBall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float vx = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->vx(), target);
  }

  // optional float vy = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->vy(), target);
  }

  // optional float vz = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vz(), target);
  }

  // optional bool teleport_safely = 7 [default = false];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->teleport_safely(), target);
  }

  // optional bool roll = 8 [default = false];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->roll(), target);
  }

  // optional bool by_force = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->by_force(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeleportBall)
  return target;
}

size_t TeleportBall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeleportBall)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float vx = 4;
    if (has_vx()) {
      total_size += 1 + 4;
    }

    // optional float vy = 5;
    if (has_vy()) {
      total_size += 1 + 4;
    }

    // optional float vz = 6;
    if (has_vz()) {
      total_size += 1 + 4;
    }

    // optional bool teleport_safely = 7 [default = false];
    if (has_teleport_safely()) {
      total_size += 1 + 1;
    }

    // optional bool roll = 8 [default = false];
    if (has_roll()) {
      total_size += 1 + 1;
    }

  }
  // optional bool by_force = 9 [default = false];
  if (has_by_force()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleportBall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeleportBall)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleportBall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeleportBall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeleportBall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeleportBall)
    MergeFrom(*source);
  }
}

void TeleportBall::MergeFrom(const TeleportBall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeleportBall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      vx_ = from.vx_;
    }
    if (cached_has_bits & 0x00000010u) {
      vy_ = from.vy_;
    }
    if (cached_has_bits & 0x00000020u) {
      vz_ = from.vz_;
    }
    if (cached_has_bits & 0x00000040u) {
      teleport_safely_ = from.teleport_safely_;
    }
    if (cached_has_bits & 0x00000080u) {
      roll_ = from.roll_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_by_force(from.by_force());
  }
}

void TeleportBall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeleportBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleportBall::CopyFrom(const TeleportBall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeleportBall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleportBall::IsInitialized() const {
  return true;
}

void TeleportBall::Swap(TeleportBall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeleportBall::InternalSwap(TeleportBall* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(vx_, other->vx_);
  swap(vy_, other->vy_);
  swap(vz_, other->vz_);
  swap(teleport_safely_, other->teleport_safely_);
  swap(roll_, other->roll_);
  swap(by_force_, other->by_force_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TeleportBall::GetMetadata() const {
  protobuf_ssl_5fsimulation_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TeleportRobot::InitAsDefaultInstance() {
  ::_TeleportRobot_default_instance_._instance.get_mutable()->id_ = const_cast< ::RobotId*>(
      ::RobotId::internal_default_instance());
}
void TeleportRobot::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TeleportRobot::kIdFieldNumber;
const int TeleportRobot::kXFieldNumber;
const int TeleportRobot::kYFieldNumber;
const int TeleportRobot::kOrientationFieldNumber;
const int TeleportRobot::kVXFieldNumber;
const int TeleportRobot::kVYFieldNumber;
const int TeleportRobot::kVAngularFieldNumber;
const int TeleportRobot::kPresentFieldNumber;
const int TeleportRobot::kByForceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TeleportRobot::TeleportRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5fcontrol_2eproto::scc_info_TeleportRobot.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:TeleportRobot)
}
TeleportRobot::TeleportRobot(const TeleportRobot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::RobotId(*from.id_);
  } else {
    id_ = NULL;
  }
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&by_force_) -
    reinterpret_cast<char*>(&x_)) + sizeof(by_force_));
  // @@protoc_insertion_point(copy_constructor:TeleportRobot)
}

void TeleportRobot::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&by_force_) -
      reinterpret_cast<char*>(&id_)) + sizeof(by_force_));
}

TeleportRobot::~TeleportRobot() {
  // @@protoc_insertion_point(destructor:TeleportRobot)
  SharedDtor();
}

void TeleportRobot::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
}

void TeleportRobot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TeleportRobot::descriptor() {
  ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TeleportRobot& TeleportRobot::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5fcontrol_2eproto::scc_info_TeleportRobot.base);
  return *internal_default_instance();
}


void TeleportRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:TeleportRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(id_ != NULL);
    id_->Clear();
  }
  if (cached_has_bits & 254u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&present_) -
        reinterpret_cast<char*>(&x_)) + sizeof(present_));
  }
  by_force_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TeleportRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:TeleportRobot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RobotId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float orientation = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_orientation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &orientation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_x = 5 [default = 0];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_v_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_y = 6 [default = 0];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_v_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float v_angular = 7 [default = 0];
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_v_angular();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &v_angular_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool present = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_present();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &present_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool by_force = 9 [default = false];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          set_has_by_force();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &by_force_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TeleportRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TeleportRobot)
  return false;
#undef DO_
}

void TeleportRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TeleportRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RobotId id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x(), output);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y(), output);
  }

  // optional float orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->orientation(), output);
  }

  // optional float v_x = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->v_x(), output);
  }

  // optional float v_y = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->v_y(), output);
  }

  // optional float v_angular = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->v_angular(), output);
  }

  // optional bool present = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->present(), output);
  }

  // optional bool by_force = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->by_force(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TeleportRobot)
}

::google::protobuf::uint8* TeleportRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:TeleportRobot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RobotId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // optional float x = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x(), target);
  }

  // optional float y = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y(), target);
  }

  // optional float orientation = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->orientation(), target);
  }

  // optional float v_x = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->v_x(), target);
  }

  // optional float v_y = 6 [default = 0];
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->v_y(), target);
  }

  // optional float v_angular = 7 [default = 0];
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->v_angular(), target);
  }

  // optional bool present = 8;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->present(), target);
  }

  // optional bool by_force = 9 [default = false];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->by_force(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TeleportRobot)
  return target;
}

size_t TeleportRobot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TeleportRobot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .RobotId id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }
  if (_has_bits_[0 / 32] & 254u) {
    // optional float x = 2;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 3;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float orientation = 4;
    if (has_orientation()) {
      total_size += 1 + 4;
    }

    // optional float v_x = 5 [default = 0];
    if (has_v_x()) {
      total_size += 1 + 4;
    }

    // optional float v_y = 6 [default = 0];
    if (has_v_y()) {
      total_size += 1 + 4;
    }

    // optional float v_angular = 7 [default = 0];
    if (has_v_angular()) {
      total_size += 1 + 4;
    }

    // optional bool present = 8;
    if (has_present()) {
      total_size += 1 + 1;
    }

  }
  // optional bool by_force = 9 [default = false];
  if (has_by_force()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TeleportRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TeleportRobot)
  GOOGLE_DCHECK_NE(&from, this);
  const TeleportRobot* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TeleportRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TeleportRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TeleportRobot)
    MergeFrom(*source);
  }
}

void TeleportRobot::MergeFrom(const TeleportRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TeleportRobot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::RobotId::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      orientation_ = from.orientation_;
    }
    if (cached_has_bits & 0x00000010u) {
      v_x_ = from.v_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      v_y_ = from.v_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      v_angular_ = from.v_angular_;
    }
    if (cached_has_bits & 0x00000080u) {
      present_ = from.present_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_by_force(from.by_force());
  }
}

void TeleportRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TeleportRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeleportRobot::CopyFrom(const TeleportRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TeleportRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeleportRobot::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void TeleportRobot::Swap(TeleportRobot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TeleportRobot::InternalSwap(TeleportRobot* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(orientation_, other->orientation_);
  swap(v_x_, other->v_x_);
  swap(v_y_, other->v_y_);
  swap(v_angular_, other->v_angular_);
  swap(present_, other->present_);
  swap(by_force_, other->by_force_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TeleportRobot::GetMetadata() const {
  protobuf_ssl_5fsimulation_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SimulatorControl::InitAsDefaultInstance() {
  ::_SimulatorControl_default_instance_._instance.get_mutable()->teleport_ball_ = const_cast< ::TeleportBall*>(
      ::TeleportBall::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimulatorControl::kTeleportBallFieldNumber;
const int SimulatorControl::kTeleportRobotFieldNumber;
const int SimulatorControl::kSimulationSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimulatorControl::SimulatorControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5fcontrol_2eproto::scc_info_SimulatorControl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SimulatorControl)
}
SimulatorControl::SimulatorControl(const SimulatorControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      teleport_robot_(from.teleport_robot_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_teleport_ball()) {
    teleport_ball_ = new ::TeleportBall(*from.teleport_ball_);
  } else {
    teleport_ball_ = NULL;
  }
  simulation_speed_ = from.simulation_speed_;
  // @@protoc_insertion_point(copy_constructor:SimulatorControl)
}

void SimulatorControl::SharedCtor() {
  ::memset(&teleport_ball_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simulation_speed_) -
      reinterpret_cast<char*>(&teleport_ball_)) + sizeof(simulation_speed_));
}

SimulatorControl::~SimulatorControl() {
  // @@protoc_insertion_point(destructor:SimulatorControl)
  SharedDtor();
}

void SimulatorControl::SharedDtor() {
  if (this != internal_default_instance()) delete teleport_ball_;
}

void SimulatorControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimulatorControl::descriptor() {
  ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimulatorControl& SimulatorControl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5fcontrol_2eproto::scc_info_SimulatorControl.base);
  return *internal_default_instance();
}


void SimulatorControl::Clear() {
// @@protoc_insertion_point(message_clear_start:SimulatorControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  teleport_robot_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(teleport_ball_ != NULL);
    teleport_ball_->Clear();
  }
  simulation_speed_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimulatorControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SimulatorControl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TeleportBall teleport_ball = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_teleport_ball()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .TeleportRobot teleport_robot = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_teleport_robot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float simulation_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_simulation_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &simulation_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SimulatorControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SimulatorControl)
  return false;
#undef DO_
}

void SimulatorControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SimulatorControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TeleportBall teleport_ball = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_teleport_ball(), output);
  }

  // repeated .TeleportRobot teleport_robot = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teleport_robot_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->teleport_robot(static_cast<int>(i)),
      output);
  }

  // optional float simulation_speed = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->simulation_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SimulatorControl)
}

::google::protobuf::uint8* SimulatorControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SimulatorControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .TeleportBall teleport_ball = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_teleport_ball(), deterministic, target);
  }

  // repeated .TeleportRobot teleport_robot = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->teleport_robot_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->teleport_robot(static_cast<int>(i)), deterministic, target);
  }

  // optional float simulation_speed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->simulation_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimulatorControl)
  return target;
}

size_t SimulatorControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimulatorControl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .TeleportRobot teleport_robot = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->teleport_robot_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->teleport_robot(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .TeleportBall teleport_ball = 1;
    if (has_teleport_ball()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *teleport_ball_);
    }

    // optional float simulation_speed = 3;
    if (has_simulation_speed()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SimulatorControl)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimulatorControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SimulatorControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SimulatorControl)
    MergeFrom(*source);
  }
}

void SimulatorControl::MergeFrom(const SimulatorControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SimulatorControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  teleport_robot_.MergeFrom(from.teleport_robot_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_teleport_ball()->::TeleportBall::MergeFrom(from.teleport_ball());
    }
    if (cached_has_bits & 0x00000002u) {
      simulation_speed_ = from.simulation_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimulatorControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SimulatorControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorControl::CopyFrom(const SimulatorControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimulatorControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorControl::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->teleport_robot())) return false;
  return true;
}

void SimulatorControl::Swap(SimulatorControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimulatorControl::InternalSwap(SimulatorControl* other) {
  using std::swap;
  CastToBase(&teleport_robot_)->InternalSwap(CastToBase(&other->teleport_robot_));
  swap(teleport_ball_, other->teleport_ball_);
  swap(simulation_speed_, other->simulation_speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimulatorControl::GetMetadata() const {
  protobuf_ssl_5fsimulation_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SimulatorCommand::InitAsDefaultInstance() {
  ::_SimulatorCommand_default_instance_._instance.get_mutable()->control_ = const_cast< ::SimulatorControl*>(
      ::SimulatorControl::internal_default_instance());
  ::_SimulatorCommand_default_instance_._instance.get_mutable()->config_ = const_cast< ::SimulatorConfig*>(
      ::SimulatorConfig::internal_default_instance());
}
void SimulatorCommand::clear_config() {
  if (config_ != NULL) config_->Clear();
  clear_has_config();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimulatorCommand::kControlFieldNumber;
const int SimulatorCommand::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimulatorCommand::SimulatorCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5fcontrol_2eproto::scc_info_SimulatorCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SimulatorCommand)
}
SimulatorCommand::SimulatorCommand(const SimulatorCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control()) {
    control_ = new ::SimulatorControl(*from.control_);
  } else {
    control_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::SimulatorConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:SimulatorCommand)
}

void SimulatorCommand::SharedCtor() {
  ::memset(&control_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&config_) -
      reinterpret_cast<char*>(&control_)) + sizeof(config_));
}

SimulatorCommand::~SimulatorCommand() {
  // @@protoc_insertion_point(destructor:SimulatorCommand)
  SharedDtor();
}

void SimulatorCommand::SharedDtor() {
  if (this != internal_default_instance()) delete control_;
  if (this != internal_default_instance()) delete config_;
}

void SimulatorCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimulatorCommand::descriptor() {
  ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimulatorCommand& SimulatorCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5fcontrol_2eproto::scc_info_SimulatorCommand.base);
  return *internal_default_instance();
}


void SimulatorCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:SimulatorCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(control_ != NULL);
      control_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(config_ != NULL);
      config_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimulatorCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SimulatorCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SimulatorControl control = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_control()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .SimulatorConfig config = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SimulatorCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SimulatorCommand)
  return false;
#undef DO_
}

void SimulatorCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SimulatorCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SimulatorControl control = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_control(), output);
  }

  // optional .SimulatorConfig config = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_config(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SimulatorCommand)
}

::google::protobuf::uint8* SimulatorCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SimulatorCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SimulatorControl control = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_control(), deterministic, target);
  }

  // optional .SimulatorConfig config = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_config(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimulatorCommand)
  return target;
}

size_t SimulatorCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimulatorCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .SimulatorControl control = 1;
    if (has_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *control_);
    }

    // optional .SimulatorConfig config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *config_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SimulatorCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimulatorCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SimulatorCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SimulatorCommand)
    MergeFrom(*source);
  }
}

void SimulatorCommand::MergeFrom(const SimulatorCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SimulatorCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_control()->::SimulatorControl::MergeFrom(from.control());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_config()->::SimulatorConfig::MergeFrom(from.config());
    }
  }
}

void SimulatorCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SimulatorCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorCommand::CopyFrom(const SimulatorCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimulatorCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorCommand::IsInitialized() const {
  if (has_control()) {
    if (!this->control_->IsInitialized()) return false;
  }
  if (has_config()) {
    if (!this->config_->IsInitialized()) return false;
  }
  return true;
}

void SimulatorCommand::Swap(SimulatorCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimulatorCommand::InternalSwap(SimulatorCommand* other) {
  using std::swap;
  swap(control_, other->control_);
  swap(config_, other->config_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimulatorCommand::GetMetadata() const {
  protobuf_ssl_5fsimulation_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SimulatorResponse::InitAsDefaultInstance() {
}
void SimulatorResponse::clear_errors() {
  errors_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimulatorResponse::kErrorsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimulatorResponse::SimulatorResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5fcontrol_2eproto::scc_info_SimulatorResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SimulatorResponse)
}
SimulatorResponse::SimulatorResponse(const SimulatorResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      errors_(from.errors_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SimulatorResponse)
}

void SimulatorResponse::SharedCtor() {
}

SimulatorResponse::~SimulatorResponse() {
  // @@protoc_insertion_point(destructor:SimulatorResponse)
  SharedDtor();
}

void SimulatorResponse::SharedDtor() {
}

void SimulatorResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimulatorResponse::descriptor() {
  ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimulatorResponse& SimulatorResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5fcontrol_2eproto::scc_info_SimulatorResponse.base);
  return *internal_default_instance();
}


void SimulatorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:SimulatorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errors_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimulatorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SimulatorResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .SimulatorError errors = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_errors()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SimulatorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SimulatorResponse)
  return false;
#undef DO_
}

void SimulatorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SimulatorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SimulatorError errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->errors(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SimulatorResponse)
}

::google::protobuf::uint8* SimulatorResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SimulatorResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .SimulatorError errors = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->errors_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->errors(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimulatorResponse)
  return target;
}

size_t SimulatorResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimulatorResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .SimulatorError errors = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->errors_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->errors(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SimulatorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimulatorResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SimulatorResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SimulatorResponse)
    MergeFrom(*source);
  }
}

void SimulatorResponse::MergeFrom(const SimulatorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SimulatorResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  errors_.MergeFrom(from.errors_);
}

void SimulatorResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SimulatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorResponse::CopyFrom(const SimulatorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimulatorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorResponse::IsInitialized() const {
  return true;
}

void SimulatorResponse::Swap(SimulatorResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimulatorResponse::InternalSwap(SimulatorResponse* other) {
  using std::swap;
  CastToBase(&errors_)->InternalSwap(CastToBase(&other->errors_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimulatorResponse::GetMetadata() const {
  protobuf_ssl_5fsimulation_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TeleportBall* Arena::CreateMaybeMessage< ::TeleportBall >(Arena* arena) {
  return Arena::CreateInternal< ::TeleportBall >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::TeleportRobot* Arena::CreateMaybeMessage< ::TeleportRobot >(Arena* arena) {
  return Arena::CreateInternal< ::TeleportRobot >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SimulatorControl* Arena::CreateMaybeMessage< ::SimulatorControl >(Arena* arena) {
  return Arena::CreateInternal< ::SimulatorControl >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SimulatorCommand* Arena::CreateMaybeMessage< ::SimulatorCommand >(Arena* arena) {
  return Arena::CreateInternal< ::SimulatorCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SimulatorResponse* Arena::CreateMaybeMessage< ::SimulatorResponse >(Arena* arena) {
  return Arena::CreateInternal< ::SimulatorResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
