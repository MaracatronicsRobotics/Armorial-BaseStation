// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_config.proto

#include "ssl_simulation_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fany_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fany_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Any;
}  // namespace protobuf_google_2fprotobuf_2fany_2eproto
namespace protobuf_ssl_5fgc_5fcommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fgc_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RobotId;
}  // namespace protobuf_ssl_5fgc_5fcommon_2eproto
namespace protobuf_ssl_5fsimulation_5fconfig_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RobotLimits;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_RobotWheelAngles;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RealismConfig;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5fconfig_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_RobotSpecs;
}  // namespace protobuf_ssl_5fsimulation_5fconfig_2eproto
namespace protobuf_ssl_5fvision_5fgeometry_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fvision_5fgeometry_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_SSL_GeometryData;
}  // namespace protobuf_ssl_5fvision_5fgeometry_2eproto
class RobotLimitsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotLimits>
      _instance;
} _RobotLimits_default_instance_;
class RobotWheelAnglesDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotWheelAngles>
      _instance;
} _RobotWheelAngles_default_instance_;
class RobotSpecsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotSpecs>
      _instance;
} _RobotSpecs_default_instance_;
class RealismConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RealismConfig>
      _instance;
} _RealismConfig_default_instance_;
class SimulatorConfigDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimulatorConfig>
      _instance;
} _SimulatorConfig_default_instance_;
namespace protobuf_ssl_5fsimulation_5fconfig_2eproto {
static void InitDefaultsRobotLimits() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotLimits_default_instance_;
    new (ptr) ::RobotLimits();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotLimits::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RobotLimits =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRobotLimits}, {}};

static void InitDefaultsRobotWheelAngles() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotWheelAngles_default_instance_;
    new (ptr) ::RobotWheelAngles();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotWheelAngles::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RobotWheelAngles =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRobotWheelAngles}, {}};

static void InitDefaultsRobotSpecs() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotSpecs_default_instance_;
    new (ptr) ::RobotSpecs();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotSpecs::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_RobotSpecs =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsRobotSpecs}, {
      &protobuf_ssl_5fgc_5fcommon_2eproto::scc_info_RobotId.base,
      &protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_RobotLimits.base,
      &protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_RobotWheelAngles.base,
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsRealismConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RealismConfig_default_instance_;
    new (ptr) ::RealismConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RealismConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RealismConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRealismConfig}, {
      &protobuf_google_2fprotobuf_2fany_2eproto::scc_info_Any.base,}};

static void InitDefaultsSimulatorConfig() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SimulatorConfig_default_instance_;
    new (ptr) ::SimulatorConfig();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SimulatorConfig::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_SimulatorConfig =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsSimulatorConfig}, {
      &protobuf_ssl_5fvision_5fgeometry_2eproto::scc_info_SSL_GeometryData.base,
      &protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_RobotSpecs.base,
      &protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_RealismConfig.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RobotLimits.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotWheelAngles.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotSpecs.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RealismConfig.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimulatorConfig.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotLimits, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotLimits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotLimits, acc_speedup_absolute_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotLimits, acc_speedup_angular_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotLimits, acc_brake_absolute_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotLimits, acc_brake_angular_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotLimits, vel_absolute_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotLimits, vel_angular_max_),
  0,
  1,
  2,
  3,
  4,
  5,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotWheelAngles, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotWheelAngles, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotWheelAngles, front_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotWheelAngles, back_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotWheelAngles, back_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotWheelAngles, front_left_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotSpecs, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotSpecs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotSpecs, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotSpecs, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotSpecs, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotSpecs, mass_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotSpecs, max_linear_kick_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotSpecs, max_chip_kick_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotSpecs, center_to_dribbler_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotSpecs, limits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotSpecs, wheel_angles_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotSpecs, custom_),
  0,
  7,
  8,
  3,
  4,
  5,
  6,
  1,
  2,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RealismConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RealismConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RealismConfig, custom_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorConfig, geometry_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorConfig, robot_specs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorConfig, realism_config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SimulatorConfig, vision_port_),
  0,
  ~0u,
  1,
  2,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::RobotLimits)},
  { 17, 26, sizeof(::RobotWheelAngles)},
  { 30, 45, sizeof(::RobotSpecs)},
  { 55, 61, sizeof(::RealismConfig)},
  { 62, 71, sizeof(::SimulatorConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RobotLimits_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RobotWheelAngles_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RobotSpecs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RealismConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SimulatorConfig_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ssl_simulation_config.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\033ssl_simulation_config.proto\032\023ssl_gc_co"
      "mmon.proto\032\031ssl_vision_geometry.proto\032\031g"
      "oogle/protobuf/any.proto\"\302\001\n\013RobotLimits"
      "\022 \n\030acc_speedup_absolute_max\030\001 \001(\002\022\037\n\027ac"
      "c_speedup_angular_max\030\002 \001(\002\022\036\n\026acc_brake"
      "_absolute_max\030\003 \001(\002\022\035\n\025acc_brake_angular"
      "_max\030\004 \001(\002\022\030\n\020vel_absolute_max\030\005 \001(\002\022\027\n\017"
      "vel_angular_max\030\006 \001(\002\"b\n\020RobotWheelAngle"
      "s\022\023\n\013front_right\030\001 \002(\002\022\022\n\nback_right\030\002 \002"
      "(\002\022\021\n\tback_left\030\003 \002(\002\022\022\n\nfront_left\030\004 \002("
      "\002\"\241\002\n\nRobotSpecs\022\024\n\002id\030\001 \002(\0132\010.RobotId\022\024"
      "\n\006radius\030\002 \001(\002:\0040.09\022\024\n\006height\030\003 \001(\002:\0040."
      "15\022\014\n\004mass\030\004 \001(\002\022\035\n\025max_linear_kick_spee"
      "d\030\007 \001(\002\022\033\n\023max_chip_kick_speed\030\010 \001(\002\022\032\n\022"
      "center_to_dribbler\030\t \001(\002\022\034\n\006limits\030\n \001(\013"
      "2\014.RobotLimits\022\'\n\014wheel_angles\030\r \001(\0132\021.R"
      "obotWheelAngles\022$\n\006custom\030\016 \003(\0132\024.google"
      ".protobuf.Any\"5\n\rRealismConfig\022$\n\006custom"
      "\030\001 \003(\0132\024.google.protobuf.Any\"\225\001\n\017Simulat"
      "orConfig\022#\n\010geometry\030\001 \001(\0132\021.SSL_Geometr"
      "yData\022 \n\013robot_specs\030\002 \003(\0132\013.RobotSpecs\022"
      "&\n\016realism_config\030\003 \001(\0132\016.RealismConfig\022"
      "\023\n\013vision_port\030\004 \001(\rB8Z6github.com/RoboC"
      "up-SSL/ssl-simulation-protocol/pkg/sim"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 958);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_simulation_config.proto", &protobuf_RegisterTypes);
  ::protobuf_ssl_5fgc_5fcommon_2eproto::AddDescriptors();
  ::protobuf_ssl_5fvision_5fgeometry_2eproto::AddDescriptors();
  ::protobuf_google_2fprotobuf_2fany_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ssl_5fsimulation_5fconfig_2eproto

// ===================================================================

void RobotLimits::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotLimits::kAccSpeedupAbsoluteMaxFieldNumber;
const int RobotLimits::kAccSpeedupAngularMaxFieldNumber;
const int RobotLimits::kAccBrakeAbsoluteMaxFieldNumber;
const int RobotLimits::kAccBrakeAngularMaxFieldNumber;
const int RobotLimits::kVelAbsoluteMaxFieldNumber;
const int RobotLimits::kVelAngularMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotLimits::RobotLimits()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_RobotLimits.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RobotLimits)
}
RobotLimits::RobotLimits(const RobotLimits& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&acc_speedup_absolute_max_, &from.acc_speedup_absolute_max_,
    static_cast<size_t>(reinterpret_cast<char*>(&vel_angular_max_) -
    reinterpret_cast<char*>(&acc_speedup_absolute_max_)) + sizeof(vel_angular_max_));
  // @@protoc_insertion_point(copy_constructor:RobotLimits)
}

void RobotLimits::SharedCtor() {
  ::memset(&acc_speedup_absolute_max_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vel_angular_max_) -
      reinterpret_cast<char*>(&acc_speedup_absolute_max_)) + sizeof(vel_angular_max_));
}

RobotLimits::~RobotLimits() {
  // @@protoc_insertion_point(destructor:RobotLimits)
  SharedDtor();
}

void RobotLimits::SharedDtor() {
}

void RobotLimits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotLimits::descriptor() {
  ::protobuf_ssl_5fsimulation_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotLimits& RobotLimits::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_RobotLimits.base);
  return *internal_default_instance();
}


void RobotLimits::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 63u) {
    ::memset(&acc_speedup_absolute_max_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&vel_angular_max_) -
        reinterpret_cast<char*>(&acc_speedup_absolute_max_)) + sizeof(vel_angular_max_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RobotLimits::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RobotLimits)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float acc_speedup_absolute_max = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_acc_speedup_absolute_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_speedup_absolute_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_speedup_angular_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_acc_speedup_angular_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_speedup_angular_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_brake_absolute_max = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_acc_brake_absolute_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_brake_absolute_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float acc_brake_angular_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_acc_brake_angular_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &acc_brake_angular_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vel_absolute_max = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_vel_absolute_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_absolute_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float vel_angular_max = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u /* 53 & 0xFF */)) {
          set_has_vel_angular_max();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &vel_angular_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RobotLimits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RobotLimits)
  return false;
#undef DO_
}

void RobotLimits::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RobotLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float acc_speedup_absolute_max = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->acc_speedup_absolute_max(), output);
  }

  // optional float acc_speedup_angular_max = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->acc_speedup_angular_max(), output);
  }

  // optional float acc_brake_absolute_max = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->acc_brake_absolute_max(), output);
  }

  // optional float acc_brake_angular_max = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->acc_brake_angular_max(), output);
  }

  // optional float vel_absolute_max = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->vel_absolute_max(), output);
  }

  // optional float vel_angular_max = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->vel_angular_max(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RobotLimits)
}

::google::protobuf::uint8* RobotLimits::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RobotLimits)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float acc_speedup_absolute_max = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->acc_speedup_absolute_max(), target);
  }

  // optional float acc_speedup_angular_max = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->acc_speedup_angular_max(), target);
  }

  // optional float acc_brake_absolute_max = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->acc_brake_absolute_max(), target);
  }

  // optional float acc_brake_angular_max = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->acc_brake_angular_max(), target);
  }

  // optional float vel_absolute_max = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->vel_absolute_max(), target);
  }

  // optional float vel_angular_max = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->vel_angular_max(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotLimits)
  return target;
}

size_t RobotLimits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotLimits)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional float acc_speedup_absolute_max = 1;
    if (has_acc_speedup_absolute_max()) {
      total_size += 1 + 4;
    }

    // optional float acc_speedup_angular_max = 2;
    if (has_acc_speedup_angular_max()) {
      total_size += 1 + 4;
    }

    // optional float acc_brake_absolute_max = 3;
    if (has_acc_brake_absolute_max()) {
      total_size += 1 + 4;
    }

    // optional float acc_brake_angular_max = 4;
    if (has_acc_brake_angular_max()) {
      total_size += 1 + 4;
    }

    // optional float vel_absolute_max = 5;
    if (has_vel_absolute_max()) {
      total_size += 1 + 4;
    }

    // optional float vel_angular_max = 6;
    if (has_vel_angular_max()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotLimits::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotLimits)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotLimits* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotLimits>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotLimits)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotLimits)
    MergeFrom(*source);
  }
}

void RobotLimits::MergeFrom(const RobotLimits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotLimits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      acc_speedup_absolute_max_ = from.acc_speedup_absolute_max_;
    }
    if (cached_has_bits & 0x00000002u) {
      acc_speedup_angular_max_ = from.acc_speedup_angular_max_;
    }
    if (cached_has_bits & 0x00000004u) {
      acc_brake_absolute_max_ = from.acc_brake_absolute_max_;
    }
    if (cached_has_bits & 0x00000008u) {
      acc_brake_angular_max_ = from.acc_brake_angular_max_;
    }
    if (cached_has_bits & 0x00000010u) {
      vel_absolute_max_ = from.vel_absolute_max_;
    }
    if (cached_has_bits & 0x00000020u) {
      vel_angular_max_ = from.vel_angular_max_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotLimits::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotLimits::CopyFrom(const RobotLimits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotLimits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotLimits::IsInitialized() const {
  return true;
}

void RobotLimits::Swap(RobotLimits* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotLimits::InternalSwap(RobotLimits* other) {
  using std::swap;
  swap(acc_speedup_absolute_max_, other->acc_speedup_absolute_max_);
  swap(acc_speedup_angular_max_, other->acc_speedup_angular_max_);
  swap(acc_brake_absolute_max_, other->acc_brake_absolute_max_);
  swap(acc_brake_angular_max_, other->acc_brake_angular_max_);
  swap(vel_absolute_max_, other->vel_absolute_max_);
  swap(vel_angular_max_, other->vel_angular_max_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotLimits::GetMetadata() const {
  protobuf_ssl_5fsimulation_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RobotWheelAngles::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotWheelAngles::kFrontRightFieldNumber;
const int RobotWheelAngles::kBackRightFieldNumber;
const int RobotWheelAngles::kBackLeftFieldNumber;
const int RobotWheelAngles::kFrontLeftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotWheelAngles::RobotWheelAngles()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_RobotWheelAngles.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RobotWheelAngles)
}
RobotWheelAngles::RobotWheelAngles(const RobotWheelAngles& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&front_right_, &from.front_right_,
    static_cast<size_t>(reinterpret_cast<char*>(&front_left_) -
    reinterpret_cast<char*>(&front_right_)) + sizeof(front_left_));
  // @@protoc_insertion_point(copy_constructor:RobotWheelAngles)
}

void RobotWheelAngles::SharedCtor() {
  ::memset(&front_right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&front_left_) -
      reinterpret_cast<char*>(&front_right_)) + sizeof(front_left_));
}

RobotWheelAngles::~RobotWheelAngles() {
  // @@protoc_insertion_point(destructor:RobotWheelAngles)
  SharedDtor();
}

void RobotWheelAngles::SharedDtor() {
}

void RobotWheelAngles::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotWheelAngles::descriptor() {
  ::protobuf_ssl_5fsimulation_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotWheelAngles& RobotWheelAngles::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_RobotWheelAngles.base);
  return *internal_default_instance();
}


void RobotWheelAngles::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotWheelAngles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&front_right_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&front_left_) -
        reinterpret_cast<char*>(&front_right_)) + sizeof(front_left_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RobotWheelAngles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RobotWheelAngles)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float front_right = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_front_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &front_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float back_right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_back_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &back_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float back_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_back_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &back_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float front_left = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_front_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &front_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RobotWheelAngles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RobotWheelAngles)
  return false;
#undef DO_
}

void RobotWheelAngles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RobotWheelAngles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float front_right = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->front_right(), output);
  }

  // required float back_right = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->back_right(), output);
  }

  // required float back_left = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->back_left(), output);
  }

  // required float front_left = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->front_left(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RobotWheelAngles)
}

::google::protobuf::uint8* RobotWheelAngles::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RobotWheelAngles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float front_right = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->front_right(), target);
  }

  // required float back_right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->back_right(), target);
  }

  // required float back_left = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->back_left(), target);
  }

  // required float front_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->front_left(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotWheelAngles)
  return target;
}

size_t RobotWheelAngles::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RobotWheelAngles)
  size_t total_size = 0;

  if (has_front_right()) {
    // required float front_right = 1;
    total_size += 1 + 4;
  }

  if (has_back_right()) {
    // required float back_right = 2;
    total_size += 1 + 4;
  }

  if (has_back_left()) {
    // required float back_left = 3;
    total_size += 1 + 4;
  }

  if (has_front_left()) {
    // required float front_left = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t RobotWheelAngles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotWheelAngles)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float front_right = 1;
    total_size += 1 + 4;

    // required float back_right = 2;
    total_size += 1 + 4;

    // required float back_left = 3;
    total_size += 1 + 4;

    // required float front_left = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotWheelAngles::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotWheelAngles)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotWheelAngles* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotWheelAngles>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotWheelAngles)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotWheelAngles)
    MergeFrom(*source);
  }
}

void RobotWheelAngles::MergeFrom(const RobotWheelAngles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotWheelAngles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      front_right_ = from.front_right_;
    }
    if (cached_has_bits & 0x00000002u) {
      back_right_ = from.back_right_;
    }
    if (cached_has_bits & 0x00000004u) {
      back_left_ = from.back_left_;
    }
    if (cached_has_bits & 0x00000008u) {
      front_left_ = from.front_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotWheelAngles::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotWheelAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotWheelAngles::CopyFrom(const RobotWheelAngles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotWheelAngles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotWheelAngles::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void RobotWheelAngles::Swap(RobotWheelAngles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotWheelAngles::InternalSwap(RobotWheelAngles* other) {
  using std::swap;
  swap(front_right_, other->front_right_);
  swap(back_right_, other->back_right_);
  swap(back_left_, other->back_left_);
  swap(front_left_, other->front_left_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotWheelAngles::GetMetadata() const {
  protobuf_ssl_5fsimulation_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RobotSpecs::InitAsDefaultInstance() {
  ::_RobotSpecs_default_instance_._instance.get_mutable()->id_ = const_cast< ::RobotId*>(
      ::RobotId::internal_default_instance());
  ::_RobotSpecs_default_instance_._instance.get_mutable()->limits_ = const_cast< ::RobotLimits*>(
      ::RobotLimits::internal_default_instance());
  ::_RobotSpecs_default_instance_._instance.get_mutable()->wheel_angles_ = const_cast< ::RobotWheelAngles*>(
      ::RobotWheelAngles::internal_default_instance());
}
void RobotSpecs::clear_id() {
  if (id_ != NULL) id_->Clear();
  clear_has_id();
}
void RobotSpecs::clear_custom() {
  custom_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotSpecs::kIdFieldNumber;
const int RobotSpecs::kRadiusFieldNumber;
const int RobotSpecs::kHeightFieldNumber;
const int RobotSpecs::kMassFieldNumber;
const int RobotSpecs::kMaxLinearKickSpeedFieldNumber;
const int RobotSpecs::kMaxChipKickSpeedFieldNumber;
const int RobotSpecs::kCenterToDribblerFieldNumber;
const int RobotSpecs::kLimitsFieldNumber;
const int RobotSpecs::kWheelAnglesFieldNumber;
const int RobotSpecs::kCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotSpecs::RobotSpecs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_RobotSpecs.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RobotSpecs)
}
RobotSpecs::RobotSpecs(const RobotSpecs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      custom_(from.custom_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    id_ = new ::RobotId(*from.id_);
  } else {
    id_ = NULL;
  }
  if (from.has_limits()) {
    limits_ = new ::RobotLimits(*from.limits_);
  } else {
    limits_ = NULL;
  }
  if (from.has_wheel_angles()) {
    wheel_angles_ = new ::RobotWheelAngles(*from.wheel_angles_);
  } else {
    wheel_angles_ = NULL;
  }
  ::memcpy(&mass_, &from.mass_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&mass_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:RobotSpecs)
}

void RobotSpecs::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&center_to_dribbler_) -
      reinterpret_cast<char*>(&id_)) + sizeof(center_to_dribbler_));
  radius_ = 0.09f;
  height_ = 0.15f;
}

RobotSpecs::~RobotSpecs() {
  // @@protoc_insertion_point(destructor:RobotSpecs)
  SharedDtor();
}

void RobotSpecs::SharedDtor() {
  if (this != internal_default_instance()) delete id_;
  if (this != internal_default_instance()) delete limits_;
  if (this != internal_default_instance()) delete wheel_angles_;
}

void RobotSpecs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotSpecs::descriptor() {
  ::protobuf_ssl_5fsimulation_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotSpecs& RobotSpecs::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_RobotSpecs.base);
  return *internal_default_instance();
}


void RobotSpecs::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotSpecs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(id_ != NULL);
      id_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(limits_ != NULL);
      limits_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(wheel_angles_ != NULL);
      wheel_angles_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&mass_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&center_to_dribbler_) -
        reinterpret_cast<char*>(&mass_)) + sizeof(center_to_dribbler_));
    radius_ = 0.09f;
  }
  height_ = 0.15f;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RobotSpecs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RobotSpecs)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .RobotId id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float radius = 2 [default = 0.09];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float height = 3 [default = 0.15];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float mass = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_mass();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mass_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_linear_kick_speed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u /* 61 & 0xFF */)) {
          set_has_max_linear_kick_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_linear_kick_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_chip_kick_speed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u /* 69 & 0xFF */)) {
          set_has_max_chip_kick_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_chip_kick_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float center_to_dribbler = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u /* 77 & 0xFF */)) {
          set_has_center_to_dribbler();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &center_to_dribbler_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RobotLimits limits = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_limits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RobotWheelAngles wheel_angles = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wheel_angles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .google.protobuf.Any custom = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_custom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RobotSpecs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RobotSpecs)
  return false;
#undef DO_
}

void RobotSpecs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RobotSpecs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RobotId id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_id(), output);
  }

  // optional float radius = 2 [default = 0.09];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->radius(), output);
  }

  // optional float height = 3 [default = 0.15];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->height(), output);
  }

  // optional float mass = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->mass(), output);
  }

  // optional float max_linear_kick_speed = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->max_linear_kick_speed(), output);
  }

  // optional float max_chip_kick_speed = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->max_chip_kick_speed(), output);
  }

  // optional float center_to_dribbler = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->center_to_dribbler(), output);
  }

  // optional .RobotLimits limits = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_limits(), output);
  }

  // optional .RobotWheelAngles wheel_angles = 13;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_wheel_angles(), output);
  }

  // repeated .google.protobuf.Any custom = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14,
      this->custom(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RobotSpecs)
}

::google::protobuf::uint8* RobotSpecs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RobotSpecs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .RobotId id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_id(), deterministic, target);
  }

  // optional float radius = 2 [default = 0.09];
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->radius(), target);
  }

  // optional float height = 3 [default = 0.15];
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->height(), target);
  }

  // optional float mass = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->mass(), target);
  }

  // optional float max_linear_kick_speed = 7;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->max_linear_kick_speed(), target);
  }

  // optional float max_chip_kick_speed = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->max_chip_kick_speed(), target);
  }

  // optional float center_to_dribbler = 9;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->center_to_dribbler(), target);
  }

  // optional .RobotLimits limits = 10;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_limits(), deterministic, target);
  }

  // optional .RobotWheelAngles wheel_angles = 13;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_wheel_angles(), deterministic, target);
  }

  // repeated .google.protobuf.Any custom = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->custom(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotSpecs)
  return target;
}

size_t RobotSpecs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotSpecs)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required .RobotId id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *id_);
  }
  // repeated .google.protobuf.Any custom = 14;
  {
    unsigned int count = static_cast<unsigned int>(this->custom_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->custom(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 254u) {
    // optional .RobotLimits limits = 10;
    if (has_limits()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *limits_);
    }

    // optional .RobotWheelAngles wheel_angles = 13;
    if (has_wheel_angles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *wheel_angles_);
    }

    // optional float mass = 4;
    if (has_mass()) {
      total_size += 1 + 4;
    }

    // optional float max_linear_kick_speed = 7;
    if (has_max_linear_kick_speed()) {
      total_size += 1 + 4;
    }

    // optional float max_chip_kick_speed = 8;
    if (has_max_chip_kick_speed()) {
      total_size += 1 + 4;
    }

    // optional float center_to_dribbler = 9;
    if (has_center_to_dribbler()) {
      total_size += 1 + 4;
    }

    // optional float radius = 2 [default = 0.09];
    if (has_radius()) {
      total_size += 1 + 4;
    }

  }
  // optional float height = 3 [default = 0.15];
  if (has_height()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotSpecs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotSpecs)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotSpecs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotSpecs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotSpecs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotSpecs)
    MergeFrom(*source);
  }
}

void RobotSpecs::MergeFrom(const RobotSpecs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotSpecs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_.MergeFrom(from.custom_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_id()->::RobotId::MergeFrom(from.id());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_limits()->::RobotLimits::MergeFrom(from.limits());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_wheel_angles()->::RobotWheelAngles::MergeFrom(from.wheel_angles());
    }
    if (cached_has_bits & 0x00000008u) {
      mass_ = from.mass_;
    }
    if (cached_has_bits & 0x00000010u) {
      max_linear_kick_speed_ = from.max_linear_kick_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      max_chip_kick_speed_ = from.max_chip_kick_speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      center_to_dribbler_ = from.center_to_dribbler_;
    }
    if (cached_has_bits & 0x00000080u) {
      radius_ = from.radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_height(from.height());
  }
}

void RobotSpecs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotSpecs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotSpecs::CopyFrom(const RobotSpecs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotSpecs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotSpecs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (has_wheel_angles()) {
    if (!this->wheel_angles_->IsInitialized()) return false;
  }
  return true;
}

void RobotSpecs::Swap(RobotSpecs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotSpecs::InternalSwap(RobotSpecs* other) {
  using std::swap;
  CastToBase(&custom_)->InternalSwap(CastToBase(&other->custom_));
  swap(id_, other->id_);
  swap(limits_, other->limits_);
  swap(wheel_angles_, other->wheel_angles_);
  swap(mass_, other->mass_);
  swap(max_linear_kick_speed_, other->max_linear_kick_speed_);
  swap(max_chip_kick_speed_, other->max_chip_kick_speed_);
  swap(center_to_dribbler_, other->center_to_dribbler_);
  swap(radius_, other->radius_);
  swap(height_, other->height_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotSpecs::GetMetadata() const {
  protobuf_ssl_5fsimulation_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RealismConfig::InitAsDefaultInstance() {
}
void RealismConfig::clear_custom() {
  custom_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RealismConfig::kCustomFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RealismConfig::RealismConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_RealismConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RealismConfig)
}
RealismConfig::RealismConfig(const RealismConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      custom_(from.custom_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RealismConfig)
}

void RealismConfig::SharedCtor() {
}

RealismConfig::~RealismConfig() {
  // @@protoc_insertion_point(destructor:RealismConfig)
  SharedDtor();
}

void RealismConfig::SharedDtor() {
}

void RealismConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RealismConfig::descriptor() {
  ::protobuf_ssl_5fsimulation_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RealismConfig& RealismConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_RealismConfig.base);
  return *internal_default_instance();
}


void RealismConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:RealismConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RealismConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RealismConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .google.protobuf.Any custom = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_custom()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RealismConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RealismConfig)
  return false;
#undef DO_
}

void RealismConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RealismConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any custom = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->custom(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RealismConfig)
}

::google::protobuf::uint8* RealismConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RealismConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .google.protobuf.Any custom = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->custom_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->custom(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RealismConfig)
  return target;
}

size_t RealismConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RealismConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .google.protobuf.Any custom = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->custom_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->custom(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RealismConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RealismConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const RealismConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RealismConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RealismConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RealismConfig)
    MergeFrom(*source);
  }
}

void RealismConfig::MergeFrom(const RealismConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RealismConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  custom_.MergeFrom(from.custom_);
}

void RealismConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RealismConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RealismConfig::CopyFrom(const RealismConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RealismConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RealismConfig::IsInitialized() const {
  return true;
}

void RealismConfig::Swap(RealismConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RealismConfig::InternalSwap(RealismConfig* other) {
  using std::swap;
  CastToBase(&custom_)->InternalSwap(CastToBase(&other->custom_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RealismConfig::GetMetadata() const {
  protobuf_ssl_5fsimulation_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SimulatorConfig::InitAsDefaultInstance() {
  ::_SimulatorConfig_default_instance_._instance.get_mutable()->geometry_ = const_cast< ::SSL_GeometryData*>(
      ::SSL_GeometryData::internal_default_instance());
  ::_SimulatorConfig_default_instance_._instance.get_mutable()->realism_config_ = const_cast< ::RealismConfig*>(
      ::RealismConfig::internal_default_instance());
}
void SimulatorConfig::clear_geometry() {
  if (geometry_ != NULL) geometry_->Clear();
  clear_has_geometry();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimulatorConfig::kGeometryFieldNumber;
const int SimulatorConfig::kRobotSpecsFieldNumber;
const int SimulatorConfig::kRealismConfigFieldNumber;
const int SimulatorConfig::kVisionPortFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimulatorConfig::SimulatorConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_SimulatorConfig.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SimulatorConfig)
}
SimulatorConfig::SimulatorConfig(const SimulatorConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      robot_specs_(from.robot_specs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_geometry()) {
    geometry_ = new ::SSL_GeometryData(*from.geometry_);
  } else {
    geometry_ = NULL;
  }
  if (from.has_realism_config()) {
    realism_config_ = new ::RealismConfig(*from.realism_config_);
  } else {
    realism_config_ = NULL;
  }
  vision_port_ = from.vision_port_;
  // @@protoc_insertion_point(copy_constructor:SimulatorConfig)
}

void SimulatorConfig::SharedCtor() {
  ::memset(&geometry_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vision_port_) -
      reinterpret_cast<char*>(&geometry_)) + sizeof(vision_port_));
}

SimulatorConfig::~SimulatorConfig() {
  // @@protoc_insertion_point(destructor:SimulatorConfig)
  SharedDtor();
}

void SimulatorConfig::SharedDtor() {
  if (this != internal_default_instance()) delete geometry_;
  if (this != internal_default_instance()) delete realism_config_;
}

void SimulatorConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SimulatorConfig::descriptor() {
  ::protobuf_ssl_5fsimulation_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SimulatorConfig& SimulatorConfig::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5fconfig_2eproto::scc_info_SimulatorConfig.base);
  return *internal_default_instance();
}


void SimulatorConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:SimulatorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_specs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(geometry_ != NULL);
      geometry_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(realism_config_ != NULL);
      realism_config_->Clear();
    }
  }
  vision_port_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SimulatorConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SimulatorConfig)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .SSL_GeometryData geometry = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_geometry()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .RobotSpecs robot_specs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_robot_specs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RealismConfig realism_config = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_realism_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 vision_port = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_vision_port();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &vision_port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SimulatorConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SimulatorConfig)
  return false;
#undef DO_
}

void SimulatorConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SimulatorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SSL_GeometryData geometry = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_geometry(), output);
  }

  // repeated .RobotSpecs robot_specs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_specs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->robot_specs(static_cast<int>(i)),
      output);
  }

  // optional .RealismConfig realism_config = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_realism_config(), output);
  }

  // optional uint32 vision_port = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->vision_port(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SimulatorConfig)
}

::google::protobuf::uint8* SimulatorConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SimulatorConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .SSL_GeometryData geometry = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_geometry(), deterministic, target);
  }

  // repeated .RobotSpecs robot_specs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_specs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->robot_specs(static_cast<int>(i)), deterministic, target);
  }

  // optional .RealismConfig realism_config = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_realism_config(), deterministic, target);
  }

  // optional uint32 vision_port = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->vision_port(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SimulatorConfig)
  return target;
}

size_t SimulatorConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SimulatorConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .RobotSpecs robot_specs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->robot_specs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->robot_specs(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .SSL_GeometryData geometry = 1;
    if (has_geometry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *geometry_);
    }

    // optional .RealismConfig realism_config = 3;
    if (has_realism_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *realism_config_);
    }

    // optional uint32 vision_port = 4;
    if (has_vision_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->vision_port());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimulatorConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SimulatorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const SimulatorConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SimulatorConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SimulatorConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SimulatorConfig)
    MergeFrom(*source);
  }
}

void SimulatorConfig::MergeFrom(const SimulatorConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SimulatorConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_specs_.MergeFrom(from.robot_specs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_geometry()->::SSL_GeometryData::MergeFrom(from.geometry());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_realism_config()->::RealismConfig::MergeFrom(from.realism_config());
    }
    if (cached_has_bits & 0x00000004u) {
      vision_port_ = from.vision_port_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimulatorConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SimulatorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimulatorConfig::CopyFrom(const SimulatorConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SimulatorConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimulatorConfig::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->robot_specs())) return false;
  if (has_geometry()) {
    if (!this->geometry_->IsInitialized()) return false;
  }
  return true;
}

void SimulatorConfig::Swap(SimulatorConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimulatorConfig::InternalSwap(SimulatorConfig* other) {
  using std::swap;
  CastToBase(&robot_specs_)->InternalSwap(CastToBase(&other->robot_specs_));
  swap(geometry_, other->geometry_);
  swap(realism_config_, other->realism_config_);
  swap(vision_port_, other->vision_port_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SimulatorConfig::GetMetadata() const {
  protobuf_ssl_5fsimulation_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RobotLimits* Arena::CreateMaybeMessage< ::RobotLimits >(Arena* arena) {
  return Arena::CreateInternal< ::RobotLimits >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RobotWheelAngles* Arena::CreateMaybeMessage< ::RobotWheelAngles >(Arena* arena) {
  return Arena::CreateInternal< ::RobotWheelAngles >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RobotSpecs* Arena::CreateMaybeMessage< ::RobotSpecs >(Arena* arena) {
  return Arena::CreateInternal< ::RobotSpecs >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RealismConfig* Arena::CreateMaybeMessage< ::RealismConfig >(Arena* arena) {
  return Arena::CreateInternal< ::RealismConfig >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SimulatorConfig* Arena::CreateMaybeMessage< ::SimulatorConfig >(Arena* arena) {
  return Arena::CreateInternal< ::SimulatorConfig >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
