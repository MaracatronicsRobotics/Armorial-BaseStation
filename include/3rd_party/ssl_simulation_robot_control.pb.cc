// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ssl_simulation_robot_control.proto

#include "ssl_simulation_robot_control.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MoveGlobalVelocity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MoveLocalVelocity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MoveWheelVelocity;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_RobotCommand;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto ::google::protobuf::internal::SCCInfo<3> scc_info_RobotMoveCommand;
}  // namespace protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto
class RobotCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotCommand>
      _instance;
} _RobotCommand_default_instance_;
class RobotMoveCommandDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotMoveCommand>
      _instance;
  const ::MoveWheelVelocity* wheel_velocity_;
  const ::MoveLocalVelocity* local_velocity_;
  const ::MoveGlobalVelocity* global_velocity_;
} _RobotMoveCommand_default_instance_;
class MoveWheelVelocityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MoveWheelVelocity>
      _instance;
} _MoveWheelVelocity_default_instance_;
class MoveLocalVelocityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MoveLocalVelocity>
      _instance;
} _MoveLocalVelocity_default_instance_;
class MoveGlobalVelocityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MoveGlobalVelocity>
      _instance;
} _MoveGlobalVelocity_default_instance_;
class RobotControlDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RobotControl>
      _instance;
} _RobotControl_default_instance_;
namespace protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto {
static void InitDefaultsRobotCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotCommand_default_instance_;
    new (ptr) ::RobotCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RobotCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRobotCommand}, {
      &protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_RobotMoveCommand.base,}};

static void InitDefaultsRobotMoveCommand() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotMoveCommand_default_instance_;
    new (ptr) ::RobotMoveCommand();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotMoveCommand::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_RobotMoveCommand =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsRobotMoveCommand}, {
      &protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_MoveWheelVelocity.base,
      &protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_MoveLocalVelocity.base,
      &protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_MoveGlobalVelocity.base,}};

static void InitDefaultsMoveWheelVelocity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MoveWheelVelocity_default_instance_;
    new (ptr) ::MoveWheelVelocity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MoveWheelVelocity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MoveWheelVelocity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMoveWheelVelocity}, {}};

static void InitDefaultsMoveLocalVelocity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MoveLocalVelocity_default_instance_;
    new (ptr) ::MoveLocalVelocity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MoveLocalVelocity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MoveLocalVelocity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMoveLocalVelocity}, {}};

static void InitDefaultsMoveGlobalVelocity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_MoveGlobalVelocity_default_instance_;
    new (ptr) ::MoveGlobalVelocity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::MoveGlobalVelocity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MoveGlobalVelocity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMoveGlobalVelocity}, {}};

static void InitDefaultsRobotControl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RobotControl_default_instance_;
    new (ptr) ::RobotControl();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RobotControl::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RobotControl =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRobotControl}, {
      &protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_RobotCommand.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RobotCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotMoveCommand.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MoveWheelVelocity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MoveLocalVelocity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MoveGlobalVelocity.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RobotControl.base);
}

::google::protobuf::Metadata file_level_metadata[6];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotCommand, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotCommand, move_command_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotCommand, kick_speed_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotCommand, kick_angle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotCommand, dribbler_speed_),
  1,
  0,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotMoveCommand, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotMoveCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotMoveCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::RobotMoveCommandDefaultTypeInternal, wheel_velocity_),
  offsetof(::RobotMoveCommandDefaultTypeInternal, local_velocity_),
  offsetof(::RobotMoveCommandDefaultTypeInternal, global_velocity_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotMoveCommand, command_),
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveWheelVelocity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveWheelVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveWheelVelocity, front_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveWheelVelocity, back_right_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveWheelVelocity, back_left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveWheelVelocity, front_left_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveLocalVelocity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveLocalVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveLocalVelocity, forward_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveLocalVelocity, left_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveLocalVelocity, angular_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveGlobalVelocity, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveGlobalVelocity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveGlobalVelocity, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveGlobalVelocity, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::MoveGlobalVelocity, angular_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotControl, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RobotControl, robot_commands_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::RobotCommand)},
  { 15, 24, sizeof(::RobotMoveCommand)},
  { 27, 36, sizeof(::MoveWheelVelocity)},
  { 40, 48, sizeof(::MoveLocalVelocity)},
  { 51, 59, sizeof(::MoveGlobalVelocity)},
  { 62, 68, sizeof(::RobotControl)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RobotCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RobotMoveCommand_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MoveWheelVelocity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MoveLocalVelocity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_MoveGlobalVelocity_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RobotControl_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "ssl_simulation_robot_control.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\"ssl_simulation_robot_control.proto\"\206\001\n"
      "\014RobotCommand\022\n\n\002id\030\001 \002(\r\022\'\n\014move_comman"
      "d\030\002 \001(\0132\021.RobotMoveCommand\022\022\n\nkick_speed"
      "\030\003 \001(\002\022\025\n\nkick_angle\030\004 \001(\002:\0010\022\026\n\016dribble"
      "r_speed\030\005 \001(\002\"\251\001\n\020RobotMoveCommand\022,\n\016wh"
      "eel_velocity\030\001 \001(\0132\022.MoveWheelVelocityH\000"
      "\022,\n\016local_velocity\030\002 \001(\0132\022.MoveLocalVelo"
      "cityH\000\022.\n\017global_velocity\030\003 \001(\0132\023.MoveGl"
      "obalVelocityH\000B\t\n\007command\"c\n\021MoveWheelVe"
      "locity\022\023\n\013front_right\030\001 \002(\002\022\022\n\nback_righ"
      "t\030\002 \002(\002\022\021\n\tback_left\030\003 \002(\002\022\022\n\nfront_left"
      "\030\004 \002(\002\"C\n\021MoveLocalVelocity\022\017\n\007forward\030\001"
      " \002(\002\022\014\n\004left\030\002 \002(\002\022\017\n\007angular\030\003 \002(\002\";\n\022M"
      "oveGlobalVelocity\022\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022"
      "\017\n\007angular\030\003 \002(\002\"5\n\014RobotControl\022%\n\016robo"
      "t_commands\030\001 \003(\0132\r.RobotCommandB8Z6githu"
      "b.com/RoboCup-SSL/ssl-simulation-protoco"
      "l/pkg/sim"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 689);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ssl_simulation_robot_control.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto

// ===================================================================

void RobotCommand::InitAsDefaultInstance() {
  ::_RobotCommand_default_instance_._instance.get_mutable()->move_command_ = const_cast< ::RobotMoveCommand*>(
      ::RobotMoveCommand::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotCommand::kIdFieldNumber;
const int RobotCommand::kMoveCommandFieldNumber;
const int RobotCommand::kKickSpeedFieldNumber;
const int RobotCommand::kKickAngleFieldNumber;
const int RobotCommand::kDribblerSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotCommand::RobotCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_RobotCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RobotCommand)
}
RobotCommand::RobotCommand(const RobotCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_move_command()) {
    move_command_ = new ::RobotMoveCommand(*from.move_command_);
  } else {
    move_command_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&dribbler_speed_) -
    reinterpret_cast<char*>(&id_)) + sizeof(dribbler_speed_));
  // @@protoc_insertion_point(copy_constructor:RobotCommand)
}

void RobotCommand::SharedCtor() {
  ::memset(&move_command_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dribbler_speed_) -
      reinterpret_cast<char*>(&move_command_)) + sizeof(dribbler_speed_));
}

RobotCommand::~RobotCommand() {
  // @@protoc_insertion_point(destructor:RobotCommand)
  SharedDtor();
}

void RobotCommand::SharedDtor() {
  if (this != internal_default_instance()) delete move_command_;
}

void RobotCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotCommand::descriptor() {
  ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotCommand& RobotCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_RobotCommand.base);
  return *internal_default_instance();
}


void RobotCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(move_command_ != NULL);
    move_command_->Clear();
  }
  if (cached_has_bits & 30u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dribbler_speed_) -
        reinterpret_cast<char*>(&id_)) + sizeof(dribbler_speed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RobotCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RobotCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .RobotMoveCommand move_command = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_move_command()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float kick_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_kick_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kick_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float kick_angle = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_kick_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &kick_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dribbler_speed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {
          set_has_dribbler_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dribbler_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RobotCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RobotCommand)
  return false;
#undef DO_
}

void RobotCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RobotCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .RobotMoveCommand move_command = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_move_command(), output);
  }

  // optional float kick_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->kick_speed(), output);
  }

  // optional float kick_angle = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->kick_angle(), output);
  }

  // optional float dribbler_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->dribbler_speed(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RobotCommand)
}

::google::protobuf::uint8* RobotCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RobotCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .RobotMoveCommand move_command = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_move_command(), deterministic, target);
  }

  // optional float kick_speed = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->kick_speed(), target);
  }

  // optional float kick_angle = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->kick_angle(), target);
  }

  // optional float dribbler_speed = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->dribbler_speed(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotCommand)
  return target;
}

size_t RobotCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  // optional .RobotMoveCommand move_command = 2;
  if (has_move_command()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *move_command_);
  }

  if (_has_bits_[0 / 32] & 28u) {
    // optional float kick_speed = 3;
    if (has_kick_speed()) {
      total_size += 1 + 4;
    }

    // optional float kick_angle = 4 [default = 0];
    if (has_kick_angle()) {
      total_size += 1 + 4;
    }

    // optional float dribbler_speed = 5;
    if (has_dribbler_speed()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotCommand)
    MergeFrom(*source);
  }
}

void RobotCommand::MergeFrom(const RobotCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_move_command()->::RobotMoveCommand::MergeFrom(from.move_command());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      kick_speed_ = from.kick_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      kick_angle_ = from.kick_angle_;
    }
    if (cached_has_bits & 0x00000010u) {
      dribbler_speed_ = from.dribbler_speed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RobotCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotCommand::CopyFrom(const RobotCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  if (has_move_command()) {
    if (!this->move_command_->IsInitialized()) return false;
  }
  return true;
}

void RobotCommand::Swap(RobotCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotCommand::InternalSwap(RobotCommand* other) {
  using std::swap;
  swap(move_command_, other->move_command_);
  swap(id_, other->id_);
  swap(kick_speed_, other->kick_speed_);
  swap(kick_angle_, other->kick_angle_);
  swap(dribbler_speed_, other->dribbler_speed_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotCommand::GetMetadata() const {
  protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RobotMoveCommand::InitAsDefaultInstance() {
  ::_RobotMoveCommand_default_instance_.wheel_velocity_ = const_cast< ::MoveWheelVelocity*>(
      ::MoveWheelVelocity::internal_default_instance());
  ::_RobotMoveCommand_default_instance_.local_velocity_ = const_cast< ::MoveLocalVelocity*>(
      ::MoveLocalVelocity::internal_default_instance());
  ::_RobotMoveCommand_default_instance_.global_velocity_ = const_cast< ::MoveGlobalVelocity*>(
      ::MoveGlobalVelocity::internal_default_instance());
}
void RobotMoveCommand::set_allocated_wheel_velocity(::MoveWheelVelocity* wheel_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (wheel_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      wheel_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, wheel_velocity, submessage_arena);
    }
    set_has_wheel_velocity();
    command_.wheel_velocity_ = wheel_velocity;
  }
  // @@protoc_insertion_point(field_set_allocated:RobotMoveCommand.wheel_velocity)
}
void RobotMoveCommand::set_allocated_local_velocity(::MoveLocalVelocity* local_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (local_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      local_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, local_velocity, submessage_arena);
    }
    set_has_local_velocity();
    command_.local_velocity_ = local_velocity;
  }
  // @@protoc_insertion_point(field_set_allocated:RobotMoveCommand.local_velocity)
}
void RobotMoveCommand::set_allocated_global_velocity(::MoveGlobalVelocity* global_velocity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_command();
  if (global_velocity) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      global_velocity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, global_velocity, submessage_arena);
    }
    set_has_global_velocity();
    command_.global_velocity_ = global_velocity;
  }
  // @@protoc_insertion_point(field_set_allocated:RobotMoveCommand.global_velocity)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotMoveCommand::kWheelVelocityFieldNumber;
const int RobotMoveCommand::kLocalVelocityFieldNumber;
const int RobotMoveCommand::kGlobalVelocityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotMoveCommand::RobotMoveCommand()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_RobotMoveCommand.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RobotMoveCommand)
}
RobotMoveCommand::RobotMoveCommand(const RobotMoveCommand& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_command();
  switch (from.command_case()) {
    case kWheelVelocity: {
      mutable_wheel_velocity()->::MoveWheelVelocity::MergeFrom(from.wheel_velocity());
      break;
    }
    case kLocalVelocity: {
      mutable_local_velocity()->::MoveLocalVelocity::MergeFrom(from.local_velocity());
      break;
    }
    case kGlobalVelocity: {
      mutable_global_velocity()->::MoveGlobalVelocity::MergeFrom(from.global_velocity());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:RobotMoveCommand)
}

void RobotMoveCommand::SharedCtor() {
  clear_has_command();
}

RobotMoveCommand::~RobotMoveCommand() {
  // @@protoc_insertion_point(destructor:RobotMoveCommand)
  SharedDtor();
}

void RobotMoveCommand::SharedDtor() {
  if (has_command()) {
    clear_command();
  }
}

void RobotMoveCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotMoveCommand::descriptor() {
  ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotMoveCommand& RobotMoveCommand::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_RobotMoveCommand.base);
  return *internal_default_instance();
}


void RobotMoveCommand::clear_command() {
// @@protoc_insertion_point(one_of_clear_start:RobotMoveCommand)
  switch (command_case()) {
    case kWheelVelocity: {
      delete command_.wheel_velocity_;
      break;
    }
    case kLocalVelocity: {
      delete command_.local_velocity_;
      break;
    }
    case kGlobalVelocity: {
      delete command_.global_velocity_;
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = COMMAND_NOT_SET;
}


void RobotMoveCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotMoveCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_command();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RobotMoveCommand::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RobotMoveCommand)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .MoveWheelVelocity wheel_velocity = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_wheel_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MoveLocalVelocity local_velocity = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_local_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .MoveGlobalVelocity global_velocity = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_global_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RobotMoveCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RobotMoveCommand)
  return false;
#undef DO_
}

void RobotMoveCommand::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RobotMoveCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (command_case()) {
    case kWheelVelocity:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        1, this->_internal_wheel_velocity(), output);
      break;
    case kLocalVelocity:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        2, this->_internal_local_velocity(), output);
      break;
    case kGlobalVelocity:
      ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
        3, this->_internal_global_velocity(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RobotMoveCommand)
}

::google::protobuf::uint8* RobotMoveCommand::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RobotMoveCommand)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (command_case()) {
    case kWheelVelocity:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          1, this->_internal_wheel_velocity(), deterministic, target);
      break;
    case kLocalVelocity:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          2, this->_internal_local_velocity(), deterministic, target);
      break;
    case kGlobalVelocity:
      target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessageToArray(
          3, this->_internal_global_velocity(), deterministic, target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotMoveCommand)
  return target;
}

size_t RobotMoveCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotMoveCommand)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  switch (command_case()) {
    // optional .MoveWheelVelocity wheel_velocity = 1;
    case kWheelVelocity: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.wheel_velocity_);
      break;
    }
    // optional .MoveLocalVelocity local_velocity = 2;
    case kLocalVelocity: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.local_velocity_);
      break;
    }
    // optional .MoveGlobalVelocity global_velocity = 3;
    case kGlobalVelocity: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *command_.global_velocity_);
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotMoveCommand::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotMoveCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotMoveCommand* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotMoveCommand>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotMoveCommand)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotMoveCommand)
    MergeFrom(*source);
  }
}

void RobotMoveCommand::MergeFrom(const RobotMoveCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotMoveCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.command_case()) {
    case kWheelVelocity: {
      mutable_wheel_velocity()->::MoveWheelVelocity::MergeFrom(from.wheel_velocity());
      break;
    }
    case kLocalVelocity: {
      mutable_local_velocity()->::MoveLocalVelocity::MergeFrom(from.local_velocity());
      break;
    }
    case kGlobalVelocity: {
      mutable_global_velocity()->::MoveGlobalVelocity::MergeFrom(from.global_velocity());
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
}

void RobotMoveCommand::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotMoveCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotMoveCommand::CopyFrom(const RobotMoveCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotMoveCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotMoveCommand::IsInitialized() const {
  switch (command_case()) {
    case kWheelVelocity: {
      if (has_wheel_velocity()) {
        if (!this->wheel_velocity().IsInitialized()) return false;
      }
      break;
    }
    case kLocalVelocity: {
      if (has_local_velocity()) {
        if (!this->local_velocity().IsInitialized()) return false;
      }
      break;
    }
    case kGlobalVelocity: {
      if (has_global_velocity()) {
        if (!this->global_velocity().IsInitialized()) return false;
      }
      break;
    }
    case COMMAND_NOT_SET: {
      break;
    }
  }
  return true;
}

void RobotMoveCommand::Swap(RobotMoveCommand* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotMoveCommand::InternalSwap(RobotMoveCommand* other) {
  using std::swap;
  swap(command_, other->command_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotMoveCommand::GetMetadata() const {
  protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MoveWheelVelocity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveWheelVelocity::kFrontRightFieldNumber;
const int MoveWheelVelocity::kBackRightFieldNumber;
const int MoveWheelVelocity::kBackLeftFieldNumber;
const int MoveWheelVelocity::kFrontLeftFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveWheelVelocity::MoveWheelVelocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_MoveWheelVelocity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MoveWheelVelocity)
}
MoveWheelVelocity::MoveWheelVelocity(const MoveWheelVelocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&front_right_, &from.front_right_,
    static_cast<size_t>(reinterpret_cast<char*>(&front_left_) -
    reinterpret_cast<char*>(&front_right_)) + sizeof(front_left_));
  // @@protoc_insertion_point(copy_constructor:MoveWheelVelocity)
}

void MoveWheelVelocity::SharedCtor() {
  ::memset(&front_right_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&front_left_) -
      reinterpret_cast<char*>(&front_right_)) + sizeof(front_left_));
}

MoveWheelVelocity::~MoveWheelVelocity() {
  // @@protoc_insertion_point(destructor:MoveWheelVelocity)
  SharedDtor();
}

void MoveWheelVelocity::SharedDtor() {
}

void MoveWheelVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MoveWheelVelocity::descriptor() {
  ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MoveWheelVelocity& MoveWheelVelocity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_MoveWheelVelocity.base);
  return *internal_default_instance();
}


void MoveWheelVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveWheelVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&front_right_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&front_left_) -
        reinterpret_cast<char*>(&front_right_)) + sizeof(front_left_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MoveWheelVelocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MoveWheelVelocity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float front_right = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_front_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &front_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float back_right = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_back_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &back_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float back_left = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_back_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &back_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float front_left = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {
          set_has_front_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &front_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MoveWheelVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MoveWheelVelocity)
  return false;
#undef DO_
}

void MoveWheelVelocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MoveWheelVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float front_right = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->front_right(), output);
  }

  // required float back_right = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->back_right(), output);
  }

  // required float back_left = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->back_left(), output);
  }

  // required float front_left = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->front_left(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MoveWheelVelocity)
}

::google::protobuf::uint8* MoveWheelVelocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MoveWheelVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float front_right = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->front_right(), target);
  }

  // required float back_right = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->back_right(), target);
  }

  // required float back_left = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->back_left(), target);
  }

  // required float front_left = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->front_left(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MoveWheelVelocity)
  return target;
}

size_t MoveWheelVelocity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MoveWheelVelocity)
  size_t total_size = 0;

  if (has_front_right()) {
    // required float front_right = 1;
    total_size += 1 + 4;
  }

  if (has_back_right()) {
    // required float back_right = 2;
    total_size += 1 + 4;
  }

  if (has_back_left()) {
    // required float back_left = 3;
    total_size += 1 + 4;
  }

  if (has_front_left()) {
    // required float front_left = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MoveWheelVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MoveWheelVelocity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required float front_right = 1;
    total_size += 1 + 4;

    // required float back_right = 2;
    total_size += 1 + 4;

    // required float back_left = 3;
    total_size += 1 + 4;

    // required float front_left = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveWheelVelocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MoveWheelVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveWheelVelocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveWheelVelocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MoveWheelVelocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MoveWheelVelocity)
    MergeFrom(*source);
  }
}

void MoveWheelVelocity::MergeFrom(const MoveWheelVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MoveWheelVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      front_right_ = from.front_right_;
    }
    if (cached_has_bits & 0x00000002u) {
      back_right_ = from.back_right_;
    }
    if (cached_has_bits & 0x00000004u) {
      back_left_ = from.back_left_;
    }
    if (cached_has_bits & 0x00000008u) {
      front_left_ = from.front_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveWheelVelocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MoveWheelVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveWheelVelocity::CopyFrom(const MoveWheelVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveWheelVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveWheelVelocity::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void MoveWheelVelocity::Swap(MoveWheelVelocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveWheelVelocity::InternalSwap(MoveWheelVelocity* other) {
  using std::swap;
  swap(front_right_, other->front_right_);
  swap(back_right_, other->back_right_);
  swap(back_left_, other->back_left_);
  swap(front_left_, other->front_left_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MoveWheelVelocity::GetMetadata() const {
  protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MoveLocalVelocity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveLocalVelocity::kForwardFieldNumber;
const int MoveLocalVelocity::kLeftFieldNumber;
const int MoveLocalVelocity::kAngularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveLocalVelocity::MoveLocalVelocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_MoveLocalVelocity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MoveLocalVelocity)
}
MoveLocalVelocity::MoveLocalVelocity(const MoveLocalVelocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&forward_, &from.forward_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_) -
    reinterpret_cast<char*>(&forward_)) + sizeof(angular_));
  // @@protoc_insertion_point(copy_constructor:MoveLocalVelocity)
}

void MoveLocalVelocity::SharedCtor() {
  ::memset(&forward_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&forward_)) + sizeof(angular_));
}

MoveLocalVelocity::~MoveLocalVelocity() {
  // @@protoc_insertion_point(destructor:MoveLocalVelocity)
  SharedDtor();
}

void MoveLocalVelocity::SharedDtor() {
}

void MoveLocalVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MoveLocalVelocity::descriptor() {
  ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MoveLocalVelocity& MoveLocalVelocity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_MoveLocalVelocity.base);
  return *internal_default_instance();
}


void MoveLocalVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveLocalVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&forward_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_) -
        reinterpret_cast<char*>(&forward_)) + sizeof(angular_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MoveLocalVelocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MoveLocalVelocity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float forward = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_forward();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &forward_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float left = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float angular = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_angular();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MoveLocalVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MoveLocalVelocity)
  return false;
#undef DO_
}

void MoveLocalVelocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MoveLocalVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float forward = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->forward(), output);
  }

  // required float left = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->left(), output);
  }

  // required float angular = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angular(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MoveLocalVelocity)
}

::google::protobuf::uint8* MoveLocalVelocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MoveLocalVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float forward = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->forward(), target);
  }

  // required float left = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->left(), target);
  }

  // required float angular = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angular(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MoveLocalVelocity)
  return target;
}

size_t MoveLocalVelocity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MoveLocalVelocity)
  size_t total_size = 0;

  if (has_forward()) {
    // required float forward = 1;
    total_size += 1 + 4;
  }

  if (has_left()) {
    // required float left = 2;
    total_size += 1 + 4;
  }

  if (has_angular()) {
    // required float angular = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MoveLocalVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MoveLocalVelocity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float forward = 1;
    total_size += 1 + 4;

    // required float left = 2;
    total_size += 1 + 4;

    // required float angular = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveLocalVelocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MoveLocalVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveLocalVelocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveLocalVelocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MoveLocalVelocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MoveLocalVelocity)
    MergeFrom(*source);
  }
}

void MoveLocalVelocity::MergeFrom(const MoveLocalVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MoveLocalVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      forward_ = from.forward_;
    }
    if (cached_has_bits & 0x00000002u) {
      left_ = from.left_;
    }
    if (cached_has_bits & 0x00000004u) {
      angular_ = from.angular_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveLocalVelocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MoveLocalVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveLocalVelocity::CopyFrom(const MoveLocalVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveLocalVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveLocalVelocity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void MoveLocalVelocity::Swap(MoveLocalVelocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveLocalVelocity::InternalSwap(MoveLocalVelocity* other) {
  using std::swap;
  swap(forward_, other->forward_);
  swap(left_, other->left_);
  swap(angular_, other->angular_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MoveLocalVelocity::GetMetadata() const {
  protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MoveGlobalVelocity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveGlobalVelocity::kXFieldNumber;
const int MoveGlobalVelocity::kYFieldNumber;
const int MoveGlobalVelocity::kAngularFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveGlobalVelocity::MoveGlobalVelocity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_MoveGlobalVelocity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:MoveGlobalVelocity)
}
MoveGlobalVelocity::MoveGlobalVelocity(const MoveGlobalVelocity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&angular_) -
    reinterpret_cast<char*>(&x_)) + sizeof(angular_));
  // @@protoc_insertion_point(copy_constructor:MoveGlobalVelocity)
}

void MoveGlobalVelocity::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&angular_) -
      reinterpret_cast<char*>(&x_)) + sizeof(angular_));
}

MoveGlobalVelocity::~MoveGlobalVelocity() {
  // @@protoc_insertion_point(destructor:MoveGlobalVelocity)
  SharedDtor();
}

void MoveGlobalVelocity::SharedDtor() {
}

void MoveGlobalVelocity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MoveGlobalVelocity::descriptor() {
  ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MoveGlobalVelocity& MoveGlobalVelocity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_MoveGlobalVelocity.base);
  return *internal_default_instance();
}


void MoveGlobalVelocity::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveGlobalVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&angular_) -
        reinterpret_cast<char*>(&x_)) + sizeof(angular_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MoveGlobalVelocity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MoveGlobalVelocity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float angular = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {
          set_has_angular();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angular_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MoveGlobalVelocity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MoveGlobalVelocity)
  return false;
#undef DO_
}

void MoveGlobalVelocity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MoveGlobalVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float angular = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angular(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MoveGlobalVelocity)
}

::google::protobuf::uint8* MoveGlobalVelocity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MoveGlobalVelocity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float angular = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angular(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MoveGlobalVelocity)
  return target;
}

size_t MoveGlobalVelocity::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MoveGlobalVelocity)
  size_t total_size = 0;

  if (has_x()) {
    // required float x = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float y = 2;
    total_size += 1 + 4;
  }

  if (has_angular()) {
    // required float angular = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t MoveGlobalVelocity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MoveGlobalVelocity)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float x = 1;
    total_size += 1 + 4;

    // required float y = 2;
    total_size += 1 + 4;

    // required float angular = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MoveGlobalVelocity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MoveGlobalVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveGlobalVelocity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveGlobalVelocity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MoveGlobalVelocity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MoveGlobalVelocity)
    MergeFrom(*source);
  }
}

void MoveGlobalVelocity::MergeFrom(const MoveGlobalVelocity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MoveGlobalVelocity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      angular_ = from.angular_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MoveGlobalVelocity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MoveGlobalVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveGlobalVelocity::CopyFrom(const MoveGlobalVelocity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveGlobalVelocity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveGlobalVelocity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void MoveGlobalVelocity::Swap(MoveGlobalVelocity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveGlobalVelocity::InternalSwap(MoveGlobalVelocity* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(angular_, other->angular_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MoveGlobalVelocity::GetMetadata() const {
  protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RobotControl::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RobotControl::kRobotCommandsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RobotControl::RobotControl()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_RobotControl.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RobotControl)
}
RobotControl::RobotControl(const RobotControl& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      robot_commands_(from.robot_commands_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:RobotControl)
}

void RobotControl::SharedCtor() {
}

RobotControl::~RobotControl() {
  // @@protoc_insertion_point(destructor:RobotControl)
  SharedDtor();
}

void RobotControl::SharedDtor() {
}

void RobotControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RobotControl::descriptor() {
  ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RobotControl& RobotControl::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::scc_info_RobotControl.base);
  return *internal_default_instance();
}


void RobotControl::Clear() {
// @@protoc_insertion_point(message_clear_start:RobotControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  robot_commands_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RobotControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RobotControl)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RobotCommand robot_commands = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_robot_commands()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RobotControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RobotControl)
  return false;
#undef DO_
}

void RobotControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RobotControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RobotCommand robot_commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_commands_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->robot_commands(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RobotControl)
}

::google::protobuf::uint8* RobotControl::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RobotControl)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .RobotCommand robot_commands = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->robot_commands_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->robot_commands(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RobotControl)
  return target;
}

size_t RobotControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RobotControl)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .RobotCommand robot_commands = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->robot_commands_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->robot_commands(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RobotControl::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RobotControl)
  GOOGLE_DCHECK_NE(&from, this);
  const RobotControl* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RobotControl>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RobotControl)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RobotControl)
    MergeFrom(*source);
  }
}

void RobotControl::MergeFrom(const RobotControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RobotControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  robot_commands_.MergeFrom(from.robot_commands_);
}

void RobotControl::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RobotControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RobotControl::CopyFrom(const RobotControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RobotControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RobotControl::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->robot_commands())) return false;
  return true;
}

void RobotControl::Swap(RobotControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RobotControl::InternalSwap(RobotControl* other) {
  using std::swap;
  CastToBase(&robot_commands_)->InternalSwap(CastToBase(&other->robot_commands_));
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RobotControl::GetMetadata() const {
  protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_ssl_5fsimulation_5frobot_5fcontrol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RobotCommand* Arena::CreateMaybeMessage< ::RobotCommand >(Arena* arena) {
  return Arena::CreateInternal< ::RobotCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RobotMoveCommand* Arena::CreateMaybeMessage< ::RobotMoveCommand >(Arena* arena) {
  return Arena::CreateInternal< ::RobotMoveCommand >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MoveWheelVelocity* Arena::CreateMaybeMessage< ::MoveWheelVelocity >(Arena* arena) {
  return Arena::CreateInternal< ::MoveWheelVelocity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MoveLocalVelocity* Arena::CreateMaybeMessage< ::MoveLocalVelocity >(Arena* arena) {
  return Arena::CreateInternal< ::MoveLocalVelocity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::MoveGlobalVelocity* Arena::CreateMaybeMessage< ::MoveGlobalVelocity >(Arena* arena) {
  return Arena::CreateInternal< ::MoveGlobalVelocity >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RobotControl* Arena::CreateMaybeMessage< ::RobotControl >(Arena* arena) {
  return Arena::CreateInternal< ::RobotControl >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
